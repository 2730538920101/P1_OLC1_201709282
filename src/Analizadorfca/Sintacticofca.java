
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadorfca;

import ASTfca.Erroresfca.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import ASTfca.Instrucciones.Instrucciones;
import ASTfca.Instrucciones.Instruccion;
import ASTfca.Instrucciones.PuntajeGeneral;
import ASTfca.Instrucciones.PuntajeEspecifico;
import ASTfca.Instrucciones.Puntaje;
import ASTfca.Instrucciones.TipoPuntaje;
import ASTfca.Instrucciones.TipoDato;
import ASTfca.Instrucciones.Variable;
import ASTfca.Instrucciones.TipoVariable;
import ASTfca.Instrucciones.Parametro;
import ASTfca.Instrucciones.Caracteristicas;
import ASTfca.Instrucciones.Carac;
import ASTfca.Instrucciones.InstruccionesBarras;
import ASTfca.Instrucciones.InstruccionesPie;
import ASTfca.Instrucciones.InstruccionesLineas;
import ASTfca.Instrucciones.Compare;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintacticofca extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintacticofca() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintacticofca(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacticofca(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\005" +
    "\006\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\006\011\000\002\007\006\000\002" +
    "\013\004\000\002\013\003\000\002\014\007\000\002\014" +
    "\007\000\002\014\003\000\002\016\006\000\002\017\014" +
    "\000\002\017\012\000\002\015\007\000\002\015\007\000" +
    "\002\010\006\000\002\020\004\000\002\020\003\000\002" +
    "\021\006\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\003" +
    "\000\002\023\005\000\002\011\006\000\002\024\004\000" +
    "\002\024\003\000\002\025\006\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\027\005\000\002\027" +
    "\003\000\002\012\006\000\002\030\004\000\002\030\003" +
    "\000\002\031\006\000\002\032\003\000\002\032\003\000" +
    "\002\033\003\000\002\035\005\000\002\035\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\005\005\001\002\000\004\002\000\001" +
    "\002\000\004\026\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\014\006\022\007\013\010" +
    "\023\011\017\012\016\001\002\000\016\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\027\ufffd\001\002\000\016\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\027\ufffc\001\002" +
    "\000\004\026\140\001\002\000\016\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\027\ufffa\001\002\000\016\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\027\ufff9\001\002\000" +
    "\004\026\124\001\002\000\004\026\104\001\002\000\016" +
    "\006\022\007\013\010\023\011\017\012\016\027\103\001" +
    "\002\000\016\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\027\ufffb\001\002\000\004\032\074\001\002\000\004\026" +
    "\025\001\002\000\016\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\027\ufff8\001\002\000\014\013\026\014\027\015" +
    "\033\016\032\017\035\001\002\000\004\035\uffe7\001\002" +
    "\000\004\035\uffe6\001\002\000\004\035\040\001\002\000" +
    "\016\013\026\014\027\015\033\016\032\017\035\027\036" +
    "\001\002\000\004\035\uffe3\001\002\000\004\035\uffe4\001" +
    "\002\000\016\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\027\uffe9\001\002\000\004\035\uffe5\001\002\000\016\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\027\uffeb\001\002" +
    "\000\016\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\027" +
    "\uffea\001\002\000\014\023\051\030\050\037\047\040\045" +
    "\041\041\001\002\000\010\004\uffce\031\uffce\036\uffce\001" +
    "\002\000\004\004\073\001\002\000\010\004\uffca\031\uffca" +
    "\036\uffca\001\002\000\006\004\uffe2\036\071\001\002\000" +
    "\010\004\uffcd\031\uffcd\036\uffcd\001\002\000\010\004\uffcb" +
    "\031\uffcb\036\uffcb\001\002\000\010\004\uffcc\031\uffcc\036" +
    "\uffcc\001\002\000\012\023\051\037\047\040\045\041\041" +
    "\001\002\000\004\026\053\001\002\000\010\004\uffcf\031" +
    "\uffcf\036\uffcf\001\002\000\006\024\054\025\055\001\002" +
    "\000\004\027\066\001\002\000\004\036\056\001\002\000" +
    "\004\040\057\001\002\000\004\036\060\001\002\000\004" +
    "\040\061\001\002\000\006\027\062\036\063\001\002\000" +
    "\010\004\uffee\031\uffee\036\uffee\001\002\000\004\040\064" +
    "\001\002\000\004\027\065\001\002\000\010\004\uffef\031" +
    "\uffef\036\uffef\001\002\000\010\004\ufff0\031\ufff0\036\ufff0" +
    "\001\002\000\006\031\070\036\071\001\002\000\004\004" +
    "\uffe1\001\002\000\012\023\051\037\047\040\045\041\041" +
    "\001\002\000\010\004\uffd0\031\uffd0\036\uffd0\001\002\000" +
    "\016\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\027\uffe8" +
    "\001\002\000\004\040\075\001\002\000\004\036\076\001" +
    "\002\000\004\040\077\001\002\000\004\033\100\001\002" +
    "\000\004\004\101\001\002\000\016\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\027\ufff7\001\002\000\016\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\027\ufffe\001\002\000" +
    "\004\002\uffff\001\002\000\010\013\106\014\107\017\111" +
    "\001\002\000\012\013\106\014\107\017\111\027\122\001" +
    "\002\000\004\035\uffdc\001\002\000\004\035\uffdb\001\002" +
    "\000\004\035\113\001\002\000\004\035\uffda\001\002\000" +
    "\012\013\uffde\014\uffde\017\uffde\027\uffde\001\002\000\014" +
    "\023\051\030\115\037\047\040\045\041\041\001\002\000" +
    "\006\004\uffd8\036\071\001\002\000\012\023\051\037\047" +
    "\040\045\041\041\001\002\000\004\004\117\001\002\000" +
    "\012\013\uffdd\014\uffdd\017\uffdd\027\uffdd\001\002\000\006" +
    "\031\121\036\071\001\002\000\004\004\uffd9\001\002\000" +
    "\016\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\027\uffe0" +
    "\001\002\000\012\013\uffdf\014\uffdf\017\uffdf\027\uffdf\001" +
    "\002\000\006\013\126\020\127\001\002\000\010\013\uffd5" +
    "\020\uffd5\027\uffd5\001\002\000\004\035\uffd2\001\002\000" +
    "\004\035\uffd3\001\002\000\004\035\134\001\002\000\010" +
    "\013\126\020\127\027\133\001\002\000\010\013\uffd6\020" +
    "\uffd6\027\uffd6\001\002\000\016\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\027\uffd7\001\002\000\012\023\051\037" +
    "\047\040\045\041\041\001\002\000\006\004\uffd1\036\071" +
    "\001\002\000\004\004\137\001\002\000\010\013\uffd4\020" +
    "\uffd4\027\uffd4\001\002\000\006\021\141\022\142\001\002" +
    "\000\004\041\160\001\002\000\004\041\150\001\002\000" +
    "\010\021\ufff4\022\ufff4\027\ufff4\001\002\000\010\021\ufff1" +
    "\022\ufff1\027\ufff1\001\002\000\010\021\141\022\142\027" +
    "\146\001\002\000\016\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\027\ufff6\001\002\000\010\021\ufff5\022\ufff5\027" +
    "\ufff5\001\002\000\004\034\151\001\002\000\006\023\051" +
    "\037\152\001\002\000\004\004\157\001\002\000\004\004" +
    "\156\001\002\000\004\004\155\001\002\000\010\021\uffec" +
    "\022\uffec\027\uffec\001\002\000\010\021\uffed\022\uffed\027" +
    "\uffed\001\002\000\010\021\ufff2\022\ufff2\027\ufff2\001\002" +
    "\000\004\034\161\001\002\000\004\040\162\001\002\000" +
    "\004\004\163\001\002\000\010\021\ufff3\022\ufff3\027\ufff3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\002\005\005\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\017\004\010\006\011\007\020\010\013\011" +
    "\014\012\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\101\006\011" +
    "\007\020\010\013\011\014\012\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\030\021\033\022\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\036" +
    "\022\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\042\017\045\023\041\034\051\035" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\042\017\045\034\051" +
    "\035\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\042\017\045\034\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\104\025\111\026\107\001\001\000\006" +
    "\025\122\026\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\042\017\045\027\115\034\051\035\113\001" +
    "\001\000\002\001\001\000\012\016\042\017\045\034\051" +
    "\035\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\130\031\124\032\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\131\032\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\042\017\045\033\135" +
    "\034\051\035\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\144\014\142\015\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\146\015\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\152\017\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacticofca$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacticofca$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacticofca$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Analizadorfca.errores.add(new MiErrorfca(s.left, s.right, TipoErrorfca.SINTACTICO, 
                "Se detectó un error sintáctico ("+s.value+")"));
        
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        Analizadorfca.errores.add(new MiErrorfca(s.left, s.right, TipoErrorfca.SINTACTICO, 
                        "Se detectó un error sintáctico ("+s.value+")"));
    }  



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintacticofca$actions {
  private final Sintacticofca parser;

  /** Constructor */
  CUP$Sintacticofca$actions(Sintacticofca parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintacticofca$do_action_part00000000(
    int                        CUP$Sintacticofca$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticofca$parser,
    java.util.Stack            CUP$Sintacticofca$stack,
    int                        CUP$Sintacticofca$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacticofca$result;

      /* select the action based on the action number */
      switch (CUP$Sintacticofca$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		RESULT = start_val;
              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacticofca$parser.done_parsing();
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GENERAR_ESTADISTICAS 
            {
              Object RESULT =null;
		
    System.out.println("INICIANDO ANALISIS"); 

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GENERAR_ESTADISTICAS ::= generar_reporte_estadistico apertura_llave INSTRUCCIONES cierre_llave 
            {
              Object RESULT =null;
		int reporteleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int reporteright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String reporte = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<Instrucciones> lista = (ArrayList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		 
    System.out.println("token: " + reporte);
    Analizadorfca.instrucciones = lista;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("GENERAR_ESTADISTICAS",3, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<Instrucciones> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<Instrucciones> l = (ArrayList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Instrucciones valor = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    ArrayList<Instrucciones> lista = l;
    lista.add((Instrucciones)valor);
    RESULT = lista;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<Instrucciones> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Instrucciones valor = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    ArrayList<Instrucciones> lista = new ArrayList<>();
    lista.add((Instrucciones)valor);
    RESULT = lista;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= CARGAR_PROYECTOS 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DEFINIR_VARIABLES_GLOBALES 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    RESULT = a; 

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= GRAFICA_BARRAS 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= GRAFICA_PIE 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= GRAFICA_LINEAS 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    
    RESULT = a;
 
              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CARGAR_PROYECTOS ::= comparar apertura_parentesis cadena coma cadena cierre_parentesis fin_de_linea 
            {
              Instrucciones RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-6)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-6)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-2)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-2)).value;
		
    Instrucciones ins = new Instrucciones(valor, Instruccion.CARGAR_PROYECTO);
    Compare comparar = new Compare(r1,r2);
    ins.setComparar(comparar);
    RESULT = ins;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARGAR_PROYECTOS",4, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINIR_VARIABLES_GLOBALES ::= definir_globales apertura_llave VARIABLES_GLOBALES cierre_llave 
            {
              Instrucciones RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<Variable> lista = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    Instrucciones ins = new Instrucciones(valor, Instruccion.DEFINIR_GLOBALES);
    ins.setVarlist(lista);
    RESULT = ins;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("DEFINIR_VARIABLES_GLOBALES",5, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLES_GLOBALES ::= VARIABLES_GLOBALES INSTANCIA_VARIABLE 
            {
              ArrayList<Variable> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<Variable> lista = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Variable valor = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    lista.add((Variable)valor);
    RESULT = lista;
    

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("VARIABLES_GLOBALES",9, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLES_GLOBALES ::= INSTANCIA_VARIABLE 
            {
              ArrayList<Variable> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Variable valor = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    ArrayList<Variable> varlist = new ArrayList<>();
    varlist.add(valor);
    RESULT = varlist;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("VARIABLES_GLOBALES",9, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTANCIA_VARIABLE ::= tipo_de_dato_string id igual cadena fin_de_linea 
            {
              Variable RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    Variable var = new Variable(TipoVariable.STRING, identificador, valor);
    RESULT = var;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTANCIA_VARIABLE",10, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTANCIA_VARIABLE ::= tipo_de_dato_double id igual decimal fin_de_linea 
            {
              Variable RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    Variable var = new Variable(TipoVariable.DOUBLE, identificador, valor);
    RESULT = var;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTANCIA_VARIABLE",10, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTANCIA_VARIABLE ::= PUNTAJES 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    Variable var = new Variable(TipoVariable.PUNTAJE, (Puntaje)a);
    RESULT = var;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTANCIA_VARIABLE",10, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OBTENER_GENERAL ::= concatenacion apertura_llave puntaje_general cierre_llave 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    PuntajeGeneral pgeneral = new PuntajeGeneral(valor);
    RESULT = pgeneral;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("OBTENER_GENERAL",12, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OBTENER_ESPECIFICO ::= concatenacion apertura_llave puntaje_especifico coma cadena coma cadena coma cadena cierre_llave 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-7)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-7)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-7)).value;
		int str1left = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-5)).left;
		int str1right = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-5)).right;
		String str1 = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-5)).value;
		int str2left = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int str2right = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String str2 = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int str3left = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int str3right = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		String str3 = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    PuntajeEspecifico pespecifico = new PuntajeEspecifico(valor,str1, str2, str3);
    RESULT = pespecifico;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("OBTENER_ESPECIFICO",13, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-9)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OBTENER_ESPECIFICO ::= concatenacion apertura_llave puntaje_especifico coma cadena coma cadena cierre_llave 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-5)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-5)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-5)).value;
		int str1left = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int str1right = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String str1 = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int str2left = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int str2right = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		String str2 = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    PuntajeEspecifico pespecifico = new PuntajeEspecifico(valor,str1, str2);
    RESULT = pespecifico;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("OBTENER_ESPECIFICO",13, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PUNTAJES ::= tipo_de_dato_double id igual OBTENER_GENERAL fin_de_linea 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    Puntaje puntaje = new Puntaje(TipoPuntaje.GENERAL, identificador, (PuntajeGeneral)valor);
    RESULT = puntaje;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("PUNTAJES",11, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PUNTAJES ::= tipo_de_dato_double id igual OBTENER_ESPECIFICO fin_de_linea 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    Puntaje puntaje = new Puntaje(TipoPuntaje.ESPECIFICO, identificador, (PuntajeEspecifico)valor);
    RESULT = puntaje;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("PUNTAJES",11, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GRAFICA_BARRAS ::= grafica_de_barras apertura_llave INSTRUCCIONES_BARRAS cierre_llave 
            {
              Instrucciones RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<InstruccionesBarras> lista = (ArrayList<InstruccionesBarras>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    Instrucciones ins = new Instrucciones(valor, Instruccion.GRAFICA_BARRAS);
    ins.setInstb(lista);
    RESULT = ins;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("GRAFICA_BARRAS",6, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCIONES_BARRAS ::= INSTRUCCIONES_BARRAS INSTRUCCION_BARRAS 
            {
              ArrayList<InstruccionesBarras> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<InstruccionesBarras> lista = (ArrayList<InstruccionesBarras>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		InstruccionesBarras valor = (InstruccionesBarras)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    lista.add((InstruccionesBarras)valor);
    RESULT = lista;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_BARRAS",14, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCIONES_BARRAS ::= INSTRUCCION_BARRAS 
            {
              ArrayList<InstruccionesBarras> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		InstruccionesBarras valor = (InstruccionesBarras)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    ArrayList<InstruccionesBarras> insb = new ArrayList<>();
    insb.add((InstruccionesBarras)valor);
    RESULT = insb;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_BARRAS",14, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION_BARRAS ::= CARACTERISTICAS_BARRAS dos_puntos VALOR_BARRAS fin_de_linea 
            {
              InstruccionesBarras RESULT =null;
		int caracleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int caracright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		Object carac = (Object)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    InstruccionesBarras binst = new InstruccionesBarras((Carac)carac,param);
    RESULT = binst;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_BARRAS",15, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CARACTERISTICAS_BARRAS ::= titulo_grafica 
            {
              Object RESULT =null;
		
    Carac carac = new Carac(Caracteristicas.TITULO);
    RESULT = carac;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS_BARRAS",16, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CARACTERISTICAS_BARRAS ::= ejex 
            {
              Object RESULT =null;
		
    Carac carac = new Carac(Caracteristicas.EJEX);
    RESULT = carac;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS_BARRAS",16, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CARACTERISTICAS_BARRAS ::= valores_grafica 
            {
              Object RESULT =null;
		
    Carac carac = new Carac(Caracteristicas.VALORES);
    RESULT = carac;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS_BARRAS",16, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CARACTERISTICAS_BARRAS ::= titulo_ejex 
            {
              Object RESULT =null;
		
    Carac carac = new Carac(Caracteristicas.TITULOX);
    RESULT = carac;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS_BARRAS",16, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CARACTERISTICAS_BARRAS ::= titulo_ejey 
            {
              Object RESULT =null;
		
    Carac carac = new Carac(Caracteristicas.TITULOY);
    RESULT = carac;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS_BARRAS",16, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR_BARRAS ::= PARAMLIST 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("VALOR_BARRAS",17, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR_BARRAS ::= apertura_corchete PARAMLIST cierre_corchete 
            {
              ArrayList<Parametro> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<Parametro> lista = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    RESULT = lista;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("VALOR_BARRAS",17, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GRAFICA_PIE ::= grafica_de_pie apertura_llave INSTRUCCIONES_PIE cierre_llave 
            {
              Instrucciones RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<InstruccionesPie> lista = (ArrayList<InstruccionesPie>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    Instrucciones ins = new Instrucciones(valor, Instruccion.GRAFICA_PIE);
    ins.setInstp(lista);
    RESULT = ins;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("GRAFICA_PIE",7, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCIONES_PIE ::= INSTRUCCIONES_PIE INSTRUCCION_PIE 
            {
              ArrayList<InstruccionesPie> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<InstruccionesPie> lista = (ArrayList<InstruccionesPie>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		InstruccionesPie valor = (InstruccionesPie)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		 
    lista.add((InstruccionesPie)valor);
    RESULT = lista;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_PIE",18, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCIONES_PIE ::= INSTRUCCION_PIE 
            {
              ArrayList<InstruccionesPie> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		InstruccionesPie valor = (InstruccionesPie)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    ArrayList<InstruccionesPie> insp = new ArrayList<>();
    insp.add((InstruccionesPie)valor);
    RESULT = insp;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_PIE",18, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION_PIE ::= CARACTERISTICAS_PIE dos_puntos VALOR_PIE fin_de_linea 
            {
              InstruccionesPie RESULT =null;
		int caracleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int caracright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		Object carac = (Object)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
     InstruccionesPie pinst = new InstruccionesPie((Carac)carac,param);
    RESULT = pinst;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_PIE",19, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CARACTERISTICAS_PIE ::= titulo_grafica 
            {
              Object RESULT =null;
		
    Carac carac = new Carac(Caracteristicas.TITULO);
    RESULT = carac;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS_PIE",20, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CARACTERISTICAS_PIE ::= ejex 
            {
              Object RESULT =null;
		
    Carac carac = new Carac(Caracteristicas.EJEX);
    RESULT = carac;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS_PIE",20, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CARACTERISTICAS_PIE ::= valores_grafica 
            {
              Object RESULT =null;
		
    Carac carac = new Carac(Caracteristicas.VALORES);
    RESULT = carac;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS_PIE",20, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR_PIE ::= apertura_corchete PARAMLIST cierre_corchete 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    RESULT = a;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("VALOR_PIE",21, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR_PIE ::= PARAMLIST 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("VALOR_PIE",21, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // GRAFICA_LINEAS ::= grafica_de_lineas apertura_llave INSTRUCCIONES_LINEAS cierre_llave 
            {
              Instrucciones RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<InstruccionesLineas> lista = (ArrayList<InstruccionesLineas>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    Instrucciones ins = new Instrucciones(valor, Instruccion.GRAFICA_LINEAS);
    ins.setInstl(lista);
    RESULT = ins;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("GRAFICA_LINEAS",8, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCIONES_LINEAS ::= INSTRUCCIONES_LINEAS INSTRUCCION_LINEAS 
            {
              ArrayList<InstruccionesLineas> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<InstruccionesLineas> lista = (ArrayList<InstruccionesLineas>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		InstruccionesLineas valor = (InstruccionesLineas)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    lista.add((InstruccionesLineas)valor);
    RESULT = lista;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_LINEAS",22, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCIONES_LINEAS ::= INSTRUCCION_LINEAS 
            {
              ArrayList<InstruccionesLineas> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		InstruccionesLineas valor = (InstruccionesLineas)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    ArrayList<InstruccionesLineas> insp = new ArrayList<>();
    insp.add((InstruccionesLineas)valor);
    RESULT = insp;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_LINEAS",22, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION_LINEAS ::= CARACTERISTICAS_LINEAS dos_puntos VALOR_LINEAS fin_de_linea 
            {
              InstruccionesLineas RESULT =null;
		int caracleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).left;
		int caracright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).right;
		Object carac = (Object)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-1)).value;
		
    InstruccionesLineas linst = new InstruccionesLineas((Carac)carac,param);
    RESULT = linst;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_LINEAS",23, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CARACTERISTICAS_LINEAS ::= archivo_grafica_lineas 
            {
              Object RESULT =null;
		
    Carac carac = new Carac(Caracteristicas.ARCHIVO);
    RESULT = carac;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS_LINEAS",24, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CARACTERISTICAS_LINEAS ::= titulo_grafica 
            {
              Object RESULT =null;
		
    Carac carac = new Carac(Caracteristicas.TITULO);
    RESULT = carac;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS_LINEAS",24, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALOR_LINEAS ::= PARAMLIST 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("VALOR_LINEAS",25, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMLIST ::= PARAMLIST coma PARAM 
            {
              ArrayList<Parametro> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-2)).right;
		ArrayList<Parametro> lista = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Parametro valor = (Parametro)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    lista.add((Parametro)valor);
    RESULT = lista;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("PARAMLIST",27, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.elementAt(CUP$Sintacticofca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMLIST ::= PARAM 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    ArrayList<Parametro> paramlist = new ArrayList<>();
    paramlist.add((Parametro)a);
    RESULT = paramlist;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("PARAMLIST",27, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARAM ::= id 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    Parametro param = new Parametro(TipoDato.IDENTIFICADOR, (String)a);
    RESULT = param;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("PARAM",26, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAM ::= cadena 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    Parametro param = new Parametro(TipoDato.CADENA, (String)a);
    RESULT = param;   

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("PARAM",26, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAM ::= decimal 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    Parametro param = new Parametro(TipoDato.DECIMAL, (String)a);
    RESULT = param;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("PARAM",26, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAM ::= OBTENER_ESPECIFICO 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    Parametro param = new Parametro(TipoDato.PUNTAJE_ESPECIFICO, (PuntajeEspecifico)a);
    RESULT = param;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("PARAM",26, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAM ::= OBTENER_GENERAL 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticofca$stack.peek()).value;
		
    Parametro param = new Parametro(TipoDato.PUNTAJE_GENERAL, (PuntajeGeneral)a);
    RESULT = param;

              CUP$Sintacticofca$result = parser.getSymbolFactory().newSymbol("PARAM",26, ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticofca$stack.peek()), RESULT);
            }
          return CUP$Sintacticofca$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintacticofca$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintacticofca$do_action(
    int                        CUP$Sintacticofca$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticofca$parser,
    java.util.Stack            CUP$Sintacticofca$stack,
    int                        CUP$Sintacticofca$top)
    throws java.lang.Exception
    {
              return CUP$Sintacticofca$do_action_part00000000(
                               CUP$Sintacticofca$act_num,
                               CUP$Sintacticofca$parser,
                               CUP$Sintacticofca$stack,
                               CUP$Sintacticofca$top);
    }
}

}
