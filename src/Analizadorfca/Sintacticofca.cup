package Analizadorfca;
import ASTfca.Erroresfca.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import ASTfca.Instrucciones.Instrucciones;
import ASTfca.Instrucciones.Instruccion;
import ASTfca.Instrucciones.PuntajeGeneral;
import ASTfca.Instrucciones.PuntajeEspecifico;
import ASTfca.Instrucciones.Puntaje;
import ASTfca.Instrucciones.TipoPuntaje;
import ASTfca.Instrucciones.TipoDato;
import ASTfca.Instrucciones.Variable;
import ASTfca.Instrucciones.TipoVariable;
import ASTfca.Instrucciones.Parametro;
import ASTfca.Instrucciones.Caracteristicas;
import ASTfca.Instrucciones.Carac;
import ASTfca.Instrucciones.InstruccionesBarras;
import ASTfca.Instrucciones.InstruccionesPie;
import ASTfca.Instrucciones.InstruccionesLineas;
import ASTfca.Instrucciones.Compare;



parser code
{:
/**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Analizadorfca.errores.add(new MiErrorfca(s.left, s.right, TipoErrorfca.SINTACTICO, 
                "Se detectó un error sintáctico ("+s.value+")",String.valueOf(s.value)));
        
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        Analizadorfca.errores.add(new MiErrorfca(s.left, s.right, TipoErrorfca.SINTACTICO, 
                        "Se detectó un error sintáctico ("+s.value+")",String.valueOf(s.value)));
    }  

:}


terminal fin_de_linea;
terminal String generar_reporte_estadistico;
terminal String comparar;
terminal String definir_globales;
terminal String grafica_de_barras;
terminal String grafica_de_pie;
terminal String grafica_de_lineas;
terminal titulo_grafica, ejex, titulo_ejex, titulo_ejey;
terminal valores_grafica;
terminal archivo_grafica_lineas;
terminal tipo_de_dato_string, tipo_de_dato_double;
terminal concatenacion;
terminal String puntaje_general, puntaje_especifico;
terminal apertura_llave, cierre_llave, apertura_corchete, cierre_corchete, apertura_parentesis, cierre_parentesis;
terminal igual, dos_puntos, coma;
terminal String decimal,cadena,id;

non terminal INICIO;
non terminal ArrayList<Instrucciones> INSTRUCCIONES;
non terminal Instrucciones INSTRUCCION;
non terminal GENERAR_ESTADISTICAS;
non terminal Instrucciones CARGAR_PROYECTOS;
non terminal Instrucciones DEFINIR_VARIABLES_GLOBALES;
non terminal Instrucciones GRAFICA_BARRAS;
non terminal Instrucciones GRAFICA_PIE;
non terminal Instrucciones GRAFICA_LINEAS;
non terminal ArrayList<Variable> VARIABLES_GLOBALES; 
non terminal Variable INSTANCIA_VARIABLE;
non terminal PUNTAJES;
non terminal OBTENER_GENERAL, OBTENER_ESPECIFICO;
non terminal ArrayList<InstruccionesBarras> INSTRUCCIONES_BARRAS;
non terminal InstruccionesBarras INSTRUCCION_BARRAS;
non terminal CARACTERISTICAS_BARRAS;
non terminal ArrayList<Parametro> VALOR_BARRAS;
non terminal ArrayList<InstruccionesPie> INSTRUCCIONES_PIE;
non terminal InstruccionesPie INSTRUCCION_PIE;
non terminal CARACTERISTICAS_PIE;
non terminal ArrayList<Parametro> VALOR_PIE;
non terminal ArrayList<InstruccionesLineas> INSTRUCCIONES_LINEAS;
non terminal InstruccionesLineas INSTRUCCION_LINEAS;
non terminal CARACTERISTICAS_LINEAS;
non terminal ArrayList<Parametro> VALOR_LINEAS;
non terminal Parametro PARAM;
non terminal ArrayList<Parametro> PARAMLIST;


start with INICIO;

INICIO ::= GENERAR_ESTADISTICAS {:
    System.out.println("INICIANDO ANALISIS"); 
:};

GENERAR_ESTADISTICAS ::= generar_reporte_estadistico:reporte apertura_llave INSTRUCCIONES:lista cierre_llave {: 
    System.out.println("token: " + reporte);
    Analizadorfca.instrucciones = lista;
:};

INSTRUCCIONES ::= INSTRUCCIONES:l INSTRUCCION:valor {:
    ArrayList<Instrucciones> lista = l;
    lista.add((Instrucciones)valor);
    RESULT = lista;
:}
| INSTRUCCION:valor {:
    ArrayList<Instrucciones> lista = new ArrayList<>();
    lista.add((Instrucciones)valor);
    RESULT = lista;
:}
;

INSTRUCCION ::= CARGAR_PROYECTOS:a {:
    RESULT = a;
:}
| DEFINIR_VARIABLES_GLOBALES:a {:
    RESULT = a; 
:}
| GRAFICA_BARRAS:a {:
    RESULT = a;
:}
| GRAFICA_PIE:a {:
    RESULT = a;
:}
| GRAFICA_LINEAS:a {:
    
    RESULT = a;
 :};

CARGAR_PROYECTOS ::= comparar:valor apertura_parentesis cadena:r1 coma cadena:r2 cierre_parentesis fin_de_linea {:
    Instrucciones ins = new Instrucciones(valor, Instruccion.CARGAR_PROYECTO);
    Compare comparar = new Compare(r1,r2);
    ins.setComparar(comparar);
    RESULT = ins;
:};

DEFINIR_VARIABLES_GLOBALES ::= definir_globales:valor apertura_llave VARIABLES_GLOBALES:lista cierre_llave {:
    Instrucciones ins = new Instrucciones(valor, Instruccion.DEFINIR_GLOBALES);
    ins.setVarlist(lista);
    RESULT = ins;
:};

VARIABLES_GLOBALES ::= VARIABLES_GLOBALES:lista INSTANCIA_VARIABLE:valor {:
    lista.add((Variable)valor);
    RESULT = lista;
    
:}
| INSTANCIA_VARIABLE:valor {:
    ArrayList<Variable> varlist = new ArrayList<>();
    varlist.add(valor);
    RESULT = varlist;
:};

INSTANCIA_VARIABLE ::= tipo_de_dato_string id:identificador igual cadena:valor fin_de_linea {:
    Variable var = new Variable(TipoVariable.STRING, identificador, valor);
    RESULT = var;
:}
| tipo_de_dato_double id:identificador igual decimal:valor fin_de_linea {:
    Variable var = new Variable(TipoVariable.DOUBLE, identificador, valor);
    RESULT = var;
:}
| PUNTAJES:a {:
    Variable var = new Variable(TipoVariable.PUNTAJE, (Puntaje)a);
    RESULT = var;
:};

OBTENER_GENERAL ::= concatenacion apertura_llave puntaje_general:valor cierre_llave {:
    PuntajeGeneral pgeneral = new PuntajeGeneral(valor);
    RESULT = pgeneral;
:}; 

OBTENER_ESPECIFICO ::= concatenacion apertura_llave puntaje_especifico:valor coma cadena:str1 coma cadena:str2 coma cadena:str3 cierre_llave {:
    PuntajeEspecifico pespecifico = new PuntajeEspecifico(valor,str1, str2, str3);
    RESULT = pespecifico;
:}
|concatenacion apertura_llave puntaje_especifico:valor coma cadena:str1 coma cadena:str2 cierre_llave {:
    PuntajeEspecifico pespecifico = new PuntajeEspecifico(valor,str1, str2);
    RESULT = pespecifico;
:}; 

PUNTAJES ::= tipo_de_dato_double id:identificador igual OBTENER_GENERAL:valor fin_de_linea {:
    Puntaje puntaje = new Puntaje(TipoPuntaje.GENERAL, identificador, (PuntajeGeneral)valor);
    RESULT = puntaje;
:}
| tipo_de_dato_double id:identificador igual OBTENER_ESPECIFICO:valor fin_de_linea {:
    Puntaje puntaje = new Puntaje(TipoPuntaje.ESPECIFICO, identificador, (PuntajeEspecifico)valor);
    RESULT = puntaje;
:};

GRAFICA_BARRAS ::= grafica_de_barras:valor apertura_llave INSTRUCCIONES_BARRAS:lista cierre_llave{:
    Instrucciones ins = new Instrucciones(valor, Instruccion.GRAFICA_BARRAS);
    ins.setInstb(lista);
    RESULT = ins;
:};

INSTRUCCIONES_BARRAS ::= INSTRUCCIONES_BARRAS:lista INSTRUCCION_BARRAS:valor {:
    lista.add((InstruccionesBarras)valor);
    RESULT = lista;
:}
| INSTRUCCION_BARRAS:valor {:
    ArrayList<InstruccionesBarras> insb = new ArrayList<>();
    insb.add((InstruccionesBarras)valor);
    RESULT = insb;
:};

INSTRUCCION_BARRAS ::= CARACTERISTICAS_BARRAS:carac dos_puntos VALOR_BARRAS:param fin_de_linea {:
    InstruccionesBarras binst = new InstruccionesBarras((Carac)carac,param);
    RESULT = binst;
:};

CARACTERISTICAS_BARRAS ::= titulo_grafica {:
    Carac carac = new Carac(Caracteristicas.TITULO);
    RESULT = carac;
:}
| ejex {:
    Carac carac = new Carac(Caracteristicas.EJEX);
    RESULT = carac;
:}
| valores_grafica {:
    Carac carac = new Carac(Caracteristicas.VALORES);
    RESULT = carac;
:}
| titulo_ejex {:
    Carac carac = new Carac(Caracteristicas.TITULOX);
    RESULT = carac;
:}
| titulo_ejey {:
    Carac carac = new Carac(Caracteristicas.TITULOY);
    RESULT = carac;
:};

VALOR_BARRAS ::= PARAMLIST:a {:
    RESULT = a;
:}
| apertura_corchete PARAMLIST:lista cierre_corchete {:
    RESULT = lista;
:};



GRAFICA_PIE ::= grafica_de_pie:valor apertura_llave INSTRUCCIONES_PIE:lista cierre_llave {:
    Instrucciones ins = new Instrucciones(valor, Instruccion.GRAFICA_PIE);
    ins.setInstp(lista);
    RESULT = ins;
:};

INSTRUCCIONES_PIE ::= INSTRUCCIONES_PIE:lista INSTRUCCION_PIE:valor {: 
    lista.add((InstruccionesPie)valor);
    RESULT = lista;
:}
| INSTRUCCION_PIE:valor {:
    ArrayList<InstruccionesPie> insp = new ArrayList<>();
    insp.add((InstruccionesPie)valor);
    RESULT = insp;
:};

INSTRUCCION_PIE ::= CARACTERISTICAS_PIE:carac dos_puntos VALOR_PIE:param fin_de_linea {:
     InstruccionesPie pinst = new InstruccionesPie((Carac)carac,param);
    RESULT = pinst;
:};

CARACTERISTICAS_PIE ::= titulo_grafica {:
    Carac carac = new Carac(Caracteristicas.TITULO);
    RESULT = carac;
:}
| ejex {:
    Carac carac = new Carac(Caracteristicas.EJEX);
    RESULT = carac;
:}
| valores_grafica {:
    Carac carac = new Carac(Caracteristicas.VALORES);
    RESULT = carac;
:};

VALOR_PIE ::= apertura_corchete PARAMLIST:a cierre_corchete {:
    RESULT = a;
:}
| PARAMLIST:a {:
    RESULT = a;
:};

GRAFICA_LINEAS ::= grafica_de_lineas:valor apertura_llave INSTRUCCIONES_LINEAS:lista cierre_llave {:
    Instrucciones ins = new Instrucciones(valor, Instruccion.GRAFICA_LINEAS);
    ins.setInstl(lista);
    RESULT = ins;
:};

INSTRUCCIONES_LINEAS ::= INSTRUCCIONES_LINEAS:lista INSTRUCCION_LINEAS:valor {:
    lista.add((InstruccionesLineas)valor);
    RESULT = lista;
:}
| INSTRUCCION_LINEAS:valor {:
    ArrayList<InstruccionesLineas> insp = new ArrayList<>();
    insp.add((InstruccionesLineas)valor);
    RESULT = insp;
:};

INSTRUCCION_LINEAS ::= CARACTERISTICAS_LINEAS:carac dos_puntos VALOR_LINEAS:param fin_de_linea {:
    InstruccionesLineas linst = new InstruccionesLineas((Carac)carac,param);
    RESULT = linst;
:};

CARACTERISTICAS_LINEAS ::= archivo_grafica_lineas {:
    Carac carac = new Carac(Caracteristicas.ARCHIVO);
    RESULT = carac;
:}
|titulo_grafica {:
    Carac carac = new Carac(Caracteristicas.TITULO);
    RESULT = carac;
:};

VALOR_LINEAS ::= PARAMLIST:a {:
    RESULT = a;
:};

PARAMLIST ::= PARAMLIST:lista coma PARAM:valor {:
    lista.add((Parametro)valor);
    RESULT = lista;
:}
| PARAM:a {:
    ArrayList<Parametro> paramlist = new ArrayList<>();
    paramlist.add((Parametro)a);
    RESULT = paramlist;
:};

PARAM ::= id:a {:
    Parametro param = new Parametro(TipoDato.IDENTIFICADOR, (String)a);
    RESULT = param;
:}
| cadena:a {:
    Parametro param = new Parametro(TipoDato.CADENA, (String)a);
    RESULT = param;   
:}
| decimal:a {:
    Parametro param = new Parametro(TipoDato.DECIMAL, (String)a);
    RESULT = param;
:}
| OBTENER_ESPECIFICO:a {:
    Parametro param = new Parametro(TipoDato.PUNTAJE_ESPECIFICO, (PuntajeEspecifico)a);
    RESULT = param;
:}
| OBTENER_GENERAL:a {:
    Parametro param = new Parametro(TipoDato.PUNTAJE_GENERAL, (PuntajeGeneral)a);
    RESULT = param;
:};