
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadorjs;

import java_cup.runtime.*;
import ASTjs.Erroresjs.*;
import ASTjs.Clases.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintacticojs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintacticojs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintacticojs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacticojs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\027\011\000\002\027\010\000\002\031\003\000" +
    "\002\031\004\000\002\025\004\000\002\025\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\030\013\000\002\030\012\000\002\030\012" +
    "\000\002\013\004\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\007\000\002\014\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\004\000\002\014" +
    "\003\000\002\010\007\000\002\010\006\000\002\015\005" +
    "\000\002\015\003\000\002\007\004\000\002\011\006\000" +
    "\002\011\011\000\002\011\007\000\002\012\003\000\002" +
    "\012\004\000\002\012\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\016\003\000\002" +
    "\016\017\000\002\016\016\000\002\016\013\000\002\016" +
    "\014\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\004\000\002\017\011\000\002\017\012\000" +
    "\002\017\004\000\002\017\003\000\002\020\012\000\002" +
    "\020\013\000\002\021\013\000\002\021\012\000\002\022" +
    "\010\000\002\022\007\000\002\023\004\000\002\023\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\010\060\013\061\005\062\004\001\002\000" +
    "\004\041\345\001\002\000\044\002\ufff9\030\ufff9\033\ufff9" +
    "\036\ufff9\042\ufff9\043\ufff9\044\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\001\002\000\012\002\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\001\002\000\012\002\000\060\013\061\005\062\004" +
    "\001\002\000\004\002\343\001\002\000\012\002\ufffc\060" +
    "\ufffc\061\ufffc\062\ufffc\001\002\000\012\002\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\001\002\000\004\030\014\001\002\000" +
    "\004\035\015\001\002\000\004\041\016\001\002\000\016" +
    "\030\021\033\023\036\022\042\017\061\005\062\004\001" +
    "\002\000\006\030\342\033\023\001\002\000\016\030\ufff4" +
    "\033\ufff4\036\ufff4\042\ufff4\061\ufff4\062\ufff4\001\002\000" +
    "\006\004\113\033\112\001\002\000\004\041\111\001\002" +
    "\000\004\030\034\001\002\000\016\030\ufff5\033\ufff5\036" +
    "\ufff5\042\ufff5\061\ufff5\062\ufff5\001\002\000\016\030\ufff2" +
    "\033\ufff2\036\ufff2\042\ufff2\061\ufff2\062\ufff2\001\002\000" +
    "\016\030\ufff3\033\ufff3\036\ufff3\042\ufff3\061\ufff3\062\ufff3" +
    "\001\002\000\016\030\021\033\023\036\031\042\017\061" +
    "\005\062\004\001\002\000\016\030\ufff6\033\ufff6\036\ufff6" +
    "\042\ufff6\061\ufff6\062\ufff6\001\002\000\004\041\033\001" +
    "\002\000\016\030\ufff7\033\ufff7\036\ufff7\042\ufff7\061\ufff7" +
    "\062\ufff7\001\002\000\012\002\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\001\002\000\004\004\035\001\002\000\022\017\040" +
    "\021\037\026\042\027\041\030\043\031\047\032\044\033" +
    "\045\001\002\000\066\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\040\uffc8\041\uffc8\001\002\000\022\017\040\021\037" +
    "\026\042\027\041\030\043\031\047\032\044\033\045\001" +
    "\002\000\022\017\040\021\037\026\042\027\041\030\043" +
    "\031\047\032\044\033\045\001\002\000\066\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\040\uffc7\041\uffc7\001\002\000" +
    "\066\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\040\uffc6\041" +
    "\uffc6\001\002\000\066\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\040\uffc5\041\uffc5\001\002\000\066\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\040\uffc3\041\uffc3\001\002\000\022" +
    "\017\040\021\037\026\042\027\041\030\043\031\047\032" +
    "\044\033\045\001\002\000\040\007\064\010\053\011\061" +
    "\012\052\013\063\014\065\015\057\016\056\020\054\021" +
    "\051\022\055\023\062\024\050\025\066\034\060\001\002" +
    "\000\066\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\040\uffc4" +
    "\041\uffc4\001\002\000\022\017\040\021\037\026\042\027" +
    "\041\030\043\031\047\032\044\033\045\001\002\000\022" +
    "\017\040\021\037\026\042\027\041\030\043\031\047\032" +
    "\044\033\045\001\002\000\022\017\040\021\037\026\042" +
    "\027\041\030\043\031\047\032\044\033\045\001\002\000" +
    "\022\017\040\021\037\026\042\027\041\030\043\031\047" +
    "\032\044\033\045\001\002\000\022\017\040\021\037\026" +
    "\042\027\041\030\043\031\047\032\044\033\045\001\002" +
    "\000\022\017\040\021\037\026\042\027\041\030\043\031" +
    "\047\032\044\033\045\001\002\000\022\017\040\021\037" +
    "\026\042\027\041\030\043\031\047\032\044\033\045\001" +
    "\002\000\022\017\040\021\037\026\042\027\041\030\043" +
    "\031\047\032\044\033\045\001\002\000\056\017\uffdd\021" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\036\uffdd\042\uffdd\043\uffdd\044\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\057\uffdd\061\uffdd" +
    "\062\uffdd\001\002\000\022\017\040\021\037\026\042\027" +
    "\041\030\043\031\047\032\044\033\045\001\002\000\022" +
    "\017\040\021\037\026\042\027\041\030\043\031\047\032" +
    "\044\033\045\001\002\000\022\017\040\021\037\026\042" +
    "\027\041\030\043\031\047\032\044\033\045\001\002\000" +
    "\022\017\040\021\037\026\042\027\041\030\043\031\047" +
    "\032\044\033\045\001\002\000\022\017\040\021\037\026" +
    "\042\027\041\030\043\031\047\032\044\033\045\001\002" +
    "\000\022\017\040\021\037\026\042\027\041\030\043\031" +
    "\047\032\044\033\045\001\002\000\066\005\uffd3\006\uffd3" +
    "\007\064\010\053\011\061\012\052\013\063\014\065\015" +
    "\057\016\056\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\050\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\040\uffd3\041\uffd3\001\002\000\066" +
    "\005\uffcc\006\uffcc\007\064\010\053\011\uffcc\012\uffcc\013" +
    "\063\014\uffcc\015\057\016\056\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\040\uffcc\041\uffcc" +
    "\001\002\000\066\005\uffc9\006\uffc9\007\uffc9\010\053\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\057\016\056\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\040\uffc9\041\uffc9\001\002\000\066\005\uffcb\006\uffcb\007" +
    "\064\010\053\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\057" +
    "\016\056\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\040\uffcb\041\uffcb\001\002\000\066\005" +
    "\uffd5\006\uffd5\007\064\010\053\011\061\012\052\013\063" +
    "\014\065\015\057\016\056\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\050\025\066\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\040\uffd5\041\uffd5\001" +
    "\002\000\066\005\uffcd\006\uffcd\007\064\010\053\011\uffcd" +
    "\012\uffcd\013\063\014\065\015\057\016\056\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\040" +
    "\uffcd\041\uffcd\001\002\000\066\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\056\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\040\uffd1\041\uffd1\001\002\000\066\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\040\uffd0\041\uffd0\001\002" +
    "\000\066\005\uffd6\006\uffd6\007\064\010\053\011\061\012" +
    "\052\013\063\014\065\015\057\016\056\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\062\024\050\025\066\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\040\uffd6" +
    "\041\uffd6\001\002\000\066\005\uffd8\006\uffd8\007\064\010" +
    "\053\011\061\012\052\013\063\014\065\015\057\016\056" +
    "\017\uffd8\020\uffd8\021\051\022\055\023\062\024\050\025" +
    "\066\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\040\uffd8\041\uffd8\001\002\000\066\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\057\016\056\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\040\uffca\041\uffca\001\002\000" +
    "\066\005\uffce\006\uffce\007\064\010\053\011\061\012\uffce" +
    "\013\063\014\065\015\057\016\056\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\040\uffce\041" +
    "\uffce\001\002\000\066\005\uffd7\006\uffd7\007\064\010\053" +
    "\011\061\012\052\013\063\014\065\015\057\016\056\017" +
    "\uffd7\020\uffd7\021\uffd7\022\055\023\062\024\050\025\066" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\040\uffd7\041\uffd7\001\002\000\066\005\uffd4\006\uffd4" +
    "\007\064\010\053\011\061\012\052\013\063\014\065\015" +
    "\057\016\056\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\040\uffd4\041\uffd4\001\002\000\040" +
    "\007\064\010\053\011\061\012\052\013\063\014\065\015" +
    "\057\016\056\020\054\021\051\022\055\023\062\024\050" +
    "\025\066\034\106\001\002\000\066\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\040\uffd9\041\uffd9\001\002\000\066\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\040\uffcf\041\uffcf\001" +
    "\002\000\066\005\uffd2\006\uffd2\007\064\010\053\011\061" +
    "\012\052\013\063\014\065\015\057\016\056\017\uffd2\020" +
    "\uffd2\021\uffd2\022\055\023\062\024\050\025\066\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\040" +
    "\uffd2\041\uffd2\001\002\000\012\002\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\001\002\000\024\017\040\021\037\026\042\027" +
    "\041\030\043\031\047\032\044\033\045\034\127\001\002" +
    "\000\024\017\040\021\037\026\042\027\041\030\043\031" +
    "\047\032\044\033\045\037\114\001\002\000\004\033\122" +
    "\001\002\000\042\007\064\010\053\011\061\012\052\013" +
    "\063\014\065\015\057\016\056\020\054\021\051\022\055" +
    "\023\062\024\050\025\066\040\117\041\120\001\002\000" +
    "\056\017\uffdf\021\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\036\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\057\uffdf\061\uffdf\062\uffdf\001\002\000\064\017\uffda\021" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\036\uffda\041\121\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\057\uffda\061\uffda\062\uffda\001\002\000\062\017" +
    "\uffdc\021\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\036\uffdc\042\uffdc\043\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\057\uffdc\061\uffdc\062\uffdc\001\002\000\062\017" +
    "\uffdb\021\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\036\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\057\uffdb\061\uffdb\062\uffdb\001\002\000\004\027" +
    "\123\001\002\000\004\034\124\001\002\000\006\040\117" +
    "\041\120\001\002\000\056\017\uffde\021\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde" +
    "\042\uffde\043\uffde\044\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\057\uffde\061\uffde\062\uffde\001\002" +
    "\000\006\005\163\034\331\001\002\000\004\035\131\001" +
    "\002\000\042\005\uffe1\007\064\010\053\011\061\012\052" +
    "\013\063\014\065\015\057\016\056\020\054\021\051\022" +
    "\055\023\062\024\050\025\066\034\uffe1\001\002\000\004" +
    "\041\132\001\002\000\032\030\154\033\023\042\017\043" +
    "\147\044\152\047\137\050\134\051\135\052\150\057\153" +
    "\061\005\062\004\001\002\000\040\030\uffeb\033\uffeb\036" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\057\uffeb\061\uffeb\062\uffeb\001" +
    "\002\000\004\033\321\001\002\000\004\035\310\001\002" +
    "\000\040\030\uffe8\033\uffe8\036\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\057\uffe8\061\uffe8\062\uffe8\001\002\000\004\033\274\001" +
    "\002\000\040\030\uffed\033\uffed\036\uffed\042\uffed\043\uffed" +
    "\044\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\057\uffed\061\uffed\062\uffed\001\002\000\040\030\uffe5" +
    "\033\uffe5\036\uffe5\042\uffe5\043\uffe5\044\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\057\uffe5\061\uffe5" +
    "\062\uffe5\001\002\000\040\030\uffe7\033\uffe7\036\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\057\uffe7\061\uffe7\062\uffe7\001\002\000" +
    "\006\040\117\041\120\001\002\000\040\030\uffec\033\uffec" +
    "\036\uffec\042\uffec\043\uffec\044\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\057\uffec\061\uffec\062\uffec" +
    "\001\002\000\034\030\154\033\023\036\271\042\017\043" +
    "\147\044\152\047\137\050\134\051\135\052\150\057\153" +
    "\061\005\062\004\001\002\000\040\030\uffc2\033\uffc2\036" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\057\uffc2\061\uffc2\062\uffc2\001" +
    "\002\000\004\033\265\001\002\000\004\033\237\001\002" +
    "\000\044\030\uffb6\033\uffb6\036\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\212\046\213\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\057\uffb6\061\uffb6\062\uffb6\001\002\000" +
    "\004\033\170\001\002\000\006\040\117\041\120\001\002" +
    "\000\012\004\113\033\155\055\157\056\156\001\002\000" +
    "\024\017\040\021\037\026\042\027\041\030\043\031\047" +
    "\032\044\033\045\034\161\001\002\000\010\034\uffae\040" +
    "\uffae\041\uffae\001\002\000\010\034\uffaf\040\uffaf\041\uffaf" +
    "\001\002\000\006\005\163\034\164\001\002\000\006\040" +
    "\117\041\120\001\002\000\040\030\uffe3\033\uffe3\036\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\057\uffe3\061\uffe3\062\uffe3\001\002" +
    "\000\022\017\040\021\037\026\042\027\041\030\043\031" +
    "\047\032\044\033\045\001\002\000\006\040\117\041\120" +
    "\001\002\000\040\030\uffe4\033\uffe4\036\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\057\uffe4\061\uffe4\062\uffe4\001\002\000\042\005" +
    "\uffe2\007\064\010\053\011\061\012\052\013\063\014\065" +
    "\015\057\016\056\020\054\021\051\022\055\023\062\024" +
    "\050\025\066\034\uffe2\001\002\000\040\030\uffe9\033\uffe9" +
    "\036\uffe9\042\uffe9\043\uffe9\044\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\057\uffe9\061\uffe9\062\uffe9" +
    "\001\002\000\024\017\172\021\037\026\042\027\041\030" +
    "\173\031\047\032\044\033\174\042\017\001\002\000\004" +
    "\034\202\001\002\000\022\017\040\021\037\026\042\027" +
    "\041\030\173\031\047\032\044\033\174\001\002\000\060" +
    "\004\113\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\001\002\000\022\017\040" +
    "\021\037\026\042\027\041\030\200\031\047\032\044\033" +
    "\045\001\002\000\024\017\uffbc\021\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\001\002\000" +
    "\024\017\uffbd\021\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\001\002\000\056\007\064\010" +
    "\053\011\061\012\052\013\063\014\065\015\057\016\056" +
    "\017\uffbb\020\054\021\051\022\055\023\062\024\050\025" +
    "\066\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\001\002\000\042\004\035\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\034\uffc5\001" +
    "\002\000\024\017\uffba\021\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\001\002\000\004\035" +
    "\203\001\002\000\004\041\204\001\002\000\032\030\154" +
    "\033\023\042\017\043\147\044\152\047\137\050\134\051" +
    "\135\052\150\057\153\061\005\062\004\001\002\000\034" +
    "\030\154\033\023\036\206\042\017\043\147\044\152\047" +
    "\137\050\134\051\135\052\150\057\153\061\005\062\004" +
    "\001\002\000\050\030\uffb5\033\uffb5\036\uffb5\040\117\041" +
    "\120\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\057\uffb5\061" +
    "\uffb5\062\uffb5\001\002\000\040\030\uffee\033\uffee\036\uffee" +
    "\042\uffee\043\uffee\044\uffee\047\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\054\uffee\057\uffee\061\uffee\062\uffee\001\002" +
    "\000\044\030\uffb4\033\uffb4\036\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\057\uffb4\061\uffb4\062\uffb4\001\002\000" +
    "\042\030\uffb7\033\uffb7\036\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\231\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\057\uffb7\061\uffb7\062\uffb7\001\002\000\004\035\224" +
    "\001\002\000\004\033\214\001\002\000\024\017\172\021" +
    "\037\026\042\027\041\030\173\031\047\032\044\033\174" +
    "\042\017\001\002\000\004\034\216\001\002\000\004\035" +
    "\217\001\002\000\004\041\220\001\002\000\032\030\154" +
    "\033\023\042\017\043\147\044\152\047\137\050\134\051" +
    "\135\052\150\057\153\061\005\062\004\001\002\000\034" +
    "\030\154\033\023\036\222\042\017\043\147\044\152\047" +
    "\137\050\134\051\135\052\150\057\153\061\005\062\004" +
    "\001\002\000\046\030\uffb2\033\uffb2\036\uffb2\040\117\041" +
    "\120\042\uffb2\043\uffb2\044\uffb2\045\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\057\uffb2\061\uffb2\062" +
    "\uffb2\001\002\000\042\030\uffb3\033\uffb3\036\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\057\uffb3\061\uffb3\062\uffb3\001\002" +
    "\000\004\041\225\001\002\000\032\030\154\033\023\042" +
    "\017\043\147\044\152\047\137\050\134\051\135\052\150" +
    "\057\153\061\005\062\004\001\002\000\034\030\154\033" +
    "\023\036\227\042\017\043\147\044\152\047\137\050\134" +
    "\051\135\052\150\057\153\061\005\062\004\001\002\000" +
    "\006\040\117\041\120\001\002\000\040\030\uffb9\033\uffb9" +
    "\036\uffb9\042\uffb9\043\uffb9\044\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\057\uffb9\061\uffb9\062\uffb9" +
    "\001\002\000\004\035\232\001\002\000\004\041\233\001" +
    "\002\000\032\030\154\033\023\042\017\043\147\044\152" +
    "\047\137\050\134\051\135\052\150\057\153\061\005\062" +
    "\004\001\002\000\034\030\154\033\023\036\235\042\017" +
    "\043\147\044\152\047\137\050\134\051\135\052\150\057" +
    "\153\061\005\062\004\001\002\000\006\040\117\041\120" +
    "\001\002\000\040\030\uffb8\033\uffb8\036\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\057\uffb8\061\uffb8\062\uffb8\001\002\000\024\017" +
    "\172\021\037\026\042\027\041\030\173\031\047\032\044" +
    "\033\174\042\017\001\002\000\004\034\241\001\002\000" +
    "\004\035\242\001\002\000\004\041\243\001\002\000\004" +
    "\053\244\001\002\000\022\017\040\021\037\026\042\027" +
    "\041\030\043\031\047\032\044\033\045\001\002\000\006" +
    "\053\246\054\247\001\002\000\022\017\040\021\037\026" +
    "\042\027\041\030\043\031\047\032\044\033\045\001\002" +
    "\000\004\006\250\001\002\000\004\041\251\001\002\000" +
    "\032\030\154\033\023\042\017\043\147\044\152\047\137" +
    "\050\134\051\135\052\150\057\153\061\005\062\004\001" +
    "\002\000\034\030\154\033\023\036\253\042\017\043\147" +
    "\044\152\047\137\050\134\051\135\052\150\057\153\061" +
    "\005\062\004\001\002\000\006\040\117\041\120\001\002" +
    "\000\040\030\uffc1\033\uffc1\036\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\057\uffc1\061\uffc1\062\uffc1\001\002\000\040\006\256\007" +
    "\064\010\053\011\061\012\052\013\063\014\065\015\057" +
    "\016\056\020\054\021\051\022\055\023\062\024\050\025" +
    "\066\001\002\000\004\041\257\001\002\000\032\030\154" +
    "\033\023\042\017\043\147\044\152\047\137\050\134\051" +
    "\135\052\150\057\153\061\005\062\004\001\002\000\036" +
    "\030\154\033\023\042\017\043\147\044\152\047\137\050" +
    "\134\051\135\052\150\053\uffb1\054\uffb1\057\153\061\005" +
    "\062\004\001\002\000\040\006\262\007\064\010\053\011" +
    "\061\012\052\013\063\014\065\015\057\016\056\020\054" +
    "\021\051\022\055\023\062\024\050\025\066\001\002\000" +
    "\004\041\263\001\002\000\032\030\154\033\023\042\017" +
    "\043\147\044\152\047\137\050\134\051\135\052\150\057" +
    "\153\061\005\062\004\001\002\000\036\030\154\033\023" +
    "\042\017\043\147\044\152\047\137\050\134\051\135\052" +
    "\150\053\uffb0\054\uffb0\057\153\061\005\062\004\001\002" +
    "\000\022\017\040\021\037\026\042\027\041\030\043\031" +
    "\047\032\044\033\045\001\002\000\040\007\064\010\053" +
    "\011\061\012\052\013\063\014\065\015\057\016\056\020" +
    "\054\021\051\022\055\023\062\024\050\025\066\034\267" +
    "\001\002\000\006\040\117\041\120\001\002\000\040\030" +
    "\uffea\033\uffea\036\uffea\042\uffea\043\uffea\044\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\057\uffea\061" +
    "\uffea\062\uffea\001\002\000\004\041\272\001\002\000\016" +
    "\030\ufff0\033\ufff0\036\ufff0\042\ufff0\061\ufff0\062\ufff0\001" +
    "\002\000\040\030\uffe6\033\uffe6\036\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\057\uffe6\061\uffe6\062\uffe6\001\002\000\024\017\172" +
    "\021\037\026\042\027\041\030\173\031\047\032\044\033" +
    "\174\042\017\001\002\000\022\017\040\021\037\026\042" +
    "\027\041\030\043\031\047\032\044\033\045\001\002\000" +
    "\040\007\064\010\053\011\061\012\052\013\063\014\065" +
    "\015\057\016\056\020\054\021\051\022\055\023\062\024" +
    "\050\025\066\040\277\001\002\000\004\030\300\001\002" +
    "\000\006\055\157\056\156\001\002\000\004\034\302\001" +
    "\002\000\004\035\303\001\002\000\004\041\304\001\002" +
    "\000\032\030\154\033\023\042\017\043\147\044\152\047" +
    "\137\050\134\051\135\052\150\057\153\061\005\062\004" +
    "\001\002\000\034\030\154\033\023\036\306\042\017\043" +
    "\147\044\152\047\137\050\134\051\135\052\150\057\153" +
    "\061\005\062\004\001\002\000\006\040\117\041\120\001" +
    "\002\000\040\030\uffc0\033\uffc0\036\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\057\uffc0\061\uffc0\062\uffc0\001\002\000\004\041\311" +
    "\001\002\000\032\030\154\033\023\042\017\043\147\044" +
    "\152\047\137\050\134\051\135\052\150\057\153\061\005" +
    "\062\004\001\002\000\034\030\154\033\023\036\313\042" +
    "\017\043\147\044\152\047\137\050\134\051\135\052\150" +
    "\057\153\061\005\062\004\001\002\000\004\050\314\001" +
    "\002\000\004\033\315\001\002\000\024\017\172\021\037" +
    "\026\042\027\041\030\173\031\047\032\044\033\174\042" +
    "\017\001\002\000\004\034\317\001\002\000\006\040\117" +
    "\041\120\001\002\000\040\030\uffbe\033\uffbe\036\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\057\uffbe\061\uffbe\062\uffbe\001\002\000" +
    "\024\017\172\021\037\026\042\027\041\030\173\031\047" +
    "\032\044\033\174\042\017\001\002\000\004\034\323\001" +
    "\002\000\004\035\324\001\002\000\004\041\325\001\002" +
    "\000\032\030\154\033\023\042\017\043\147\044\152\047" +
    "\137\050\134\051\135\052\150\057\153\061\005\062\004" +
    "\001\002\000\034\030\154\033\023\036\327\042\017\043" +
    "\147\044\152\047\137\050\134\051\135\052\150\057\153" +
    "\061\005\062\004\001\002\000\006\040\117\041\120\001" +
    "\002\000\040\030\uffbf\033\uffbf\036\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\057\uffbf\061\uffbf\062\uffbf\001\002\000\004\035\332" +
    "\001\002\000\004\041\333\001\002\000\034\030\154\033" +
    "\023\036\334\042\017\043\147\044\152\047\137\050\134" +
    "\051\135\052\150\057\153\061\005\062\004\001\002\000" +
    "\004\041\340\001\002\000\034\030\154\033\023\036\336" +
    "\042\017\043\147\044\152\047\137\050\134\051\135\052" +
    "\150\057\153\061\005\062\004\001\002\000\004\041\337" +
    "\001\002\000\016\030\ufff1\033\ufff1\036\ufff1\042\ufff1\061" +
    "\ufff1\062\ufff1\001\002\000\016\030\uffef\033\uffef\036\uffef" +
    "\042\uffef\061\uffef\062\uffef\001\002\000\056\017\uffe0\021" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\036\uffe0\042\uffe0\043\uffe0\044\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\057\uffe0\061\uffe0" +
    "\062\uffe0\001\002\000\004\004\113\001\002\000\004\002" +
    "\001\001\002\000\012\002\uffff\060\uffff\061\uffff\062\uffff" +
    "\001\002\000\044\002\ufff8\030\ufff8\033\ufff8\036\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\014\002\007\003\006\004\005\027\011\031" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\343\027\011\031\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\023\011\025\025\026\026\027\030\017\031\024\001\001" +
    "\000\004\011\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\023\011" +
    "\025\026\031\030\017\031\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\045\006\035\001\001\000\002" +
    "\001\001\000\006\005\107\006\035\001\001\000\006\005" +
    "\106\006\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\104\006" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\103\006\035\001\001\000\006\005\102\006\035\001" +
    "\001\000\006\005\101\006\035\001\001\000\006\005\100" +
    "\006\035\001\001\000\006\005\077\006\035\001\001\000" +
    "\006\005\076\006\035\001\001\000\006\005\075\006\035" +
    "\001\001\000\006\005\074\006\035\001\001\000\002\001" +
    "\001\000\006\005\073\006\035\001\001\000\006\005\072" +
    "\006\035\001\001\000\006\005\071\006\035\001\001\000" +
    "\006\005\070\006\035\001\001\000\006\005\067\006\035" +
    "\001\001\000\006\005\066\006\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\127\006" +
    "\035\015\125\001\001\000\006\005\114\006\035\001\001" +
    "\000\002\001\001\000\004\012\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\143\010" +
    "\132\011\141\013\144\014\137\016\135\017\145\020\150" +
    "\023\142\031\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\272\001\001\000\002\001\001\000\024\007\143" +
    "\010\132\011\141\014\206\016\135\017\145\020\150\023" +
    "\142\031\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\210\001\001\000\002\001" +
    "\001\000\004\012\166\001\001\000\002\001\001\000\010" +
    "\005\127\006\035\015\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\161\001\001" +
    "\000\002\001\001\000\006\005\165\006\035\001\001\000" +
    "\004\012\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\176\006\035\007\174\011" +
    "\175\024\170\001\001\000\002\001\001\000\010\005\106" +
    "\006\035\011\200\001\001\000\002\001\001\000\006\005" +
    "\104\006\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\143\010\132" +
    "\011\141\013\204\014\137\016\135\017\145\020\150\023" +
    "\142\031\140\001\001\000\024\007\143\010\132\011\141" +
    "\014\206\016\135\017\145\020\150\023\142\031\140\001" +
    "\001\000\004\012\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\176\006\035\007\174\011\175\024\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\143\010\132\011\141\013\220\014\137" +
    "\016\135\017\145\020\150\023\142\031\140\001\001\000" +
    "\024\007\143\010\132\011\141\014\206\016\135\017\145" +
    "\020\150\023\142\031\140\001\001\000\004\012\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\143" +
    "\010\132\011\141\013\225\014\137\016\135\017\145\020" +
    "\150\023\142\031\140\001\001\000\024\007\143\010\132" +
    "\011\141\014\206\016\135\017\145\020\150\023\142\031" +
    "\140\001\001\000\004\012\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\143\010" +
    "\132\011\141\013\233\014\137\016\135\017\145\020\150" +
    "\023\142\031\140\001\001\000\024\007\143\010\132\011" +
    "\141\014\206\016\135\017\145\020\150\023\142\031\140" +
    "\001\001\000\004\012\235\001\001\000\002\001\001\000" +
    "\014\005\176\006\035\007\174\011\175\024\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\244\001\001\000\006\005\260\006\035\001\001" +
    "\000\002\001\001\000\006\005\254\006\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\143\010\132" +
    "\011\141\013\251\014\137\016\135\017\145\020\150\023" +
    "\142\031\140\001\001\000\024\007\143\010\132\011\141" +
    "\014\206\016\135\017\145\020\150\023\142\031\140\001" +
    "\001\000\004\012\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\143\010\132\011" +
    "\141\013\257\014\137\016\135\017\145\020\150\023\142" +
    "\031\140\001\001\000\024\007\143\010\132\011\141\014" +
    "\206\016\135\017\145\020\150\023\142\031\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\143\010" +
    "\132\011\141\013\263\014\137\016\135\017\145\020\150" +
    "\023\142\031\140\001\001\000\024\007\143\010\132\011" +
    "\141\014\206\016\135\017\145\020\150\023\142\031\140" +
    "\001\001\000\006\005\265\006\035\001\001\000\002\001" +
    "\001\000\004\012\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\176\006\035\007\174\011\175\024\274\001\001\000\006" +
    "\005\275\006\035\001\001\000\002\001\001\000\004\023" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\143\010\132\011" +
    "\141\013\304\014\137\016\135\017\145\020\150\023\142" +
    "\031\140\001\001\000\024\007\143\010\132\011\141\014" +
    "\206\016\135\017\145\020\150\023\142\031\140\001\001" +
    "\000\004\012\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\143\010\132\011\141\013\311\014\137" +
    "\016\135\017\145\020\150\023\142\031\140\001\001\000" +
    "\024\007\143\010\132\011\141\014\206\016\135\017\145" +
    "\020\150\023\142\031\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\176\006\035\007\174\011\175" +
    "\024\315\001\001\000\002\001\001\000\004\012\317\001" +
    "\001\000\002\001\001\000\014\005\176\006\035\007\174" +
    "\011\175\024\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\007\143\010\132\011\141" +
    "\013\325\014\137\016\135\017\145\020\150\023\142\031" +
    "\140\001\001\000\024\007\143\010\132\011\141\014\206" +
    "\016\135\017\145\020\150\023\142\031\140\001\001\000" +
    "\004\012\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\143\010\132\011\141\013" +
    "\334\014\137\016\135\017\145\020\150\023\142\031\140" +
    "\001\001\000\002\001\001\000\024\007\143\010\132\011" +
    "\141\014\206\016\135\017\145\020\150\023\142\031\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacticojs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacticojs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacticojs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Analizadorjs.errores.add(new MiErrorjs(s.left, s.right, TipoErrorjs.SINTACTICO, 
                "Se detectó un error sintáctico ("+s.value+")"));
        
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        Analizadorjs.errores.add(new MiErrorjs(s.left, s.right, TipoErrorjs.SINTACTICO, 
                        "Se detectó un error sintáctico ("+s.value+")"));
    }
    
    public Clase clase;
    public ArrayList<Clase> claseslist = new ArrayList<>();
    public ArrayList<Comentarios> comentlist = new ArrayList<>();
    public Clases listaCl = new Clases();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintacticojs$actions {
  private final Sintacticojs parser;

  /** Constructor */
  CUP$Sintacticojs$actions(Sintacticojs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action_part00000000(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacticojs$result;

      /* select the action based on the action number */
      switch (CUP$Sintacticojs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		RESULT = start_val;
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacticojs$parser.done_parsing();
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONESGENERALES 
            {
              Object RESULT =null;
		
    System.out.println("INICIANDO EL ANALISIS GENERAL DEL ARCHIVO");
    System.out.println(listaCl.getTotalMsj());
    System.out.println("SE ANALIZARON UN TOTAL DE : " + claseslist.size()+ " CLASES");
    System.out.println("HAY UN TOTAL DE : " + comentlist.size()+" COMENTARIOS EN EL ARCHIVO");
    


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONESGENERALES ::= INSTRUCCIONESGENERALES INSTRUCCIONGENERAL 
            {
              ArrayList<Clases> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		ArrayList<Clases> lista = (ArrayList<Clases>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Clases valor = (Clases)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    lista = new ArrayList<>();
    lista.add(valor);
    RESULT = lista;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGENERALES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONESGENERALES ::= INSTRUCCIONGENERAL 
            {
              ArrayList<Clases> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Clases a = (Clases)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    ArrayList<Clases> bloque = new ArrayList<>();
    bloque.add(a);
    RESULT = bloque;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGENERALES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONGENERAL ::= CLASE 
            {
              Clases RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Clase a = (Clase)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    claseslist.add(a);
    listaCl.setListaClases(claseslist);
    RESULT = listaCl;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONGENERAL",2, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONGENERAL ::= COMENTARIOS 
            {
              Clases RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Comentarios a = (Comentarios)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    comentlist.add((Comentarios)a);
    listaCl.setListaComentarios(comentlist);
    RESULT = listaCl;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONGENERAL",2, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASE ::= definir_clase iden apertura_llave salto INSTRUCCIONESCLASE cierre_llave salto 
            {
              Clase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		ArrayList<Instrucciones> ins = (ArrayList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    clase = new Clase(valor, ins);
    clase.setLineasClase(finleft - begleft +1);
    RESULT = clase;
    

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASE",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CLASE ::= definir_clase iden apertura_llave salto cierre_llave salto 
            {
              Clase RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASE",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMENTARIOS ::= comentsimple 
            {
              Comentarios RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    Comentarios simple = new Comentarios((String)valor);
    RESULT = simple;
    

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMENTARIOS ::= comentario_multi salto 
            {
              Comentarios RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    Comentarios multi = new Comentarios((String)valor);
    RESULT = multi;
    

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONESCLASE ::= INSTRUCCIONESCLASE INSTRUCCIONCLASE 
            {
              ArrayList<Instrucciones> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		ArrayList<Instrucciones> lista = (ArrayList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Instrucciones valor = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    lista.add((Instrucciones)valor);
    RESULT = lista;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESCLASE",19, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONESCLASE ::= INSTRUCCIONCLASE 
            {
              ArrayList<Instrucciones> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Instrucciones ins = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    ArrayList<Instrucciones> inslist = new ArrayList<>();
    inslist.add((Instrucciones)ins);
    RESULT = inslist;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESCLASE",19, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONCLASE ::= DECLARACIONVARIABLE 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    Instrucciones instruc = new Instrucciones(Instruccion.DECLARACIONVARIABLE, (Variable)a);
    RESULT = instruc;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONCLASE",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONCLASE ::= DECLARACIONMETODO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Metodo a = (Metodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    Instrucciones instruc = new Instrucciones(Instruccion.DECLARACIONMETODO, (Metodo)a);
    RESULT = instruc;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONCLASE",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONCLASE ::= ASIGNACION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    Instrucciones instruc = new Instrucciones(Instruccion.DECLARACIONVARIABLE, (Variable)a); 
    RESULT = instruc;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONCLASE",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONCLASE ::= COMENTARIOS 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Comentarios a = (Comentarios)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    comentlist.add((Comentarios)a);
    

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONCLASE",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONMETODO ::= iden apertura_parentesis PARAMSLLAMADA cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave salto 
            {
              Metodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).value;
		int paramlistleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int paramlistright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		ArrayList<Parametros> paramlist = (ArrayList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    Metodo met = new Metodo(TipoMetodo.CONPARAMETROS, valor, paramlist);
    met.setLineasMetodo(finleft - begleft +1);
    RESULT = met;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONMETODO",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONMETODO ::= iden apertura_parentesis cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave salto 
            {
              Metodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    Metodo met = new Metodo(TipoMetodo.SINPARAMETROS, valor);
    met.setLineasMetodo(finleft - begleft +1);
    RESULT = met;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONMETODO",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONMETODO ::= iden apertura_parentesis PARAMSLLAMADA cierre_parentesis apertura_llave salto cierre_llave salto 
            {
              Metodo RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONMETODO",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCIONESMETODO ::= INSTRUCCIONESMETODO INSTRUCCIONMETODO 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESMETODO",9, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONESMETODO ::= INSTRUCCIONMETODO 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESMETODO",9, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONMETODO ::= DECLARACIONVARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCIONMETODO ::= LLAMADAMETODO 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCIONMETODO ::= consola apertura_parentesis EXPRESION cierre_parentesis FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCIONMETODO ::= break_t FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCIONMETODO ::= SENTENCIA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCIONMETODO ::= ASIGNACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCIONMETODO ::= INCREMENTO FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCIONMETODO ::= COMENTARIOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Comentarios a = (Comentarios)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LLAMADAMETODO ::= iden apertura_parentesis PARAMSLLAMADA cierre_parentesis FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",6, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LLAMADAMETODO ::= iden apertura_parentesis cierre_parentesis FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",6, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMSLLAMADA ::= PARAMSLLAMADA coma EXPRESION 
            {
              ArrayList<Parametros> RESULT =null;
		int paramlistleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int paramlistright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		ArrayList<Parametros> paramlist = (ArrayList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    Parametros param = new Parametros((String)valor);
    paramlist.add(param);
    RESULT = paramlist;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("PARAMSLLAMADA",11, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMSLLAMADA ::= EXPRESION 
            {
              ArrayList<Parametros> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    ArrayList<Parametros> paramlist = new ArrayList<>();
    Parametros param = new Parametros((String)valor);
    paramlist.add(param);
    RESULT = paramlist;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("PARAMSLLAMADA",11, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONVARIABLE ::= definir_variable ASIGNACION 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONVARIABLE",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= iden igual EXPRESION FINDELINEA 
            {
              Variable RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		
    Variable  var = new Variable(variable);
    RESULT = var;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= iden igual importar apertura_parentesis cadena cierre_parentesis FINDELINEA 
            {
              Variable RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		
    Variable  var = new Variable(variable);
    RESULT = var;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= apertura_parentesis iden igual EXPRESION cierre_parentesis 
            {
              Variable RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		
    Variable  var = new Variable(variable);
    RESULT = var;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FINDELINEA ::= salto 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FINDELINEA",8, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FINDELINEA ::= fin_de_linea salto 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FINDELINEA",8, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FINDELINEA ::= fin_de_linea 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FINDELINEA",8, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= apertura_parentesis EXPRESION cierre_parentesis 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION suma EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION resta EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION multiplicacion EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION division EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION potencia EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION modulo EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= resta EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= not EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION mayor_que EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION menor_que EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION mayor_igual EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION menor_igual EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION diferencia EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION igualacion EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR ::= iden 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALOR ::= true_t 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALOR ::= false_t 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA ::= GENERARIFELSE 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA ::= switch_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto LISTACASE default_t dos_puntos salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA ::= for_t apertura_parentesis ASIGNACIONSENTENCIAS EXPRESION fin_de_linea INCREMENTO cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-11)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA ::= while_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA ::= do_t apertura_llave salto INSTRUCCIONESMETODO cierre_llave while_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACIONSENTENCIAS ::= ASIGNACION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACIONSENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACIONSENTENCIAS ::= DECLARACIONVARIABLE 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACIONSENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACIONSENTENCIAS ::= EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACIONSENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACIONSENTENCIAS ::= not ASIGNACION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACIONSENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // GENERARIFELSE ::= GENERARIF else_t apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // GENERARIFELSE ::= GENERARIF GENERARELSEIF else_t apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // GENERARIFELSE ::= GENERARIF GENERARELSEIF 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // GENERARIFELSE ::= GENERARIF 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // GENERARIF ::= if_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIF",14, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // GENERARIF ::= if_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIF",14, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // GENERARELSEIF ::= else_if apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARELSEIF",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GENERARELSEIF ::= else_if apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARELSEIF",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTACASE ::= LISTACASE case_t EXPRESION dos_puntos salto INSTRUCCIONESMETODO 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("LISTACASE",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTACASE ::= case_t EXPRESION dos_puntos salto INSTRUCCIONESMETODO 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("LISTACASE",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INCREMENTO ::= iden suma_doble 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INCREMENTO",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INCREMENTO ::= iden resta_doble 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INCREMENTO",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintacticojs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
              return CUP$Sintacticojs$do_action_part00000000(
                               CUP$Sintacticojs$act_num,
                               CUP$Sintacticojs$parser,
                               CUP$Sintacticojs$stack,
                               CUP$Sintacticojs$top);
    }
}

}
