
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadorjs;

import java_cup.runtime.*;
import ASTjs.Erroresjs.*;
import ASTjs.Clases.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintacticojs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintacticojs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintacticojs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacticojs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\027\011\000\002\027\010\000" +
    "\002\031\003\000\002\031\004\000\002\025\004\000\002" +
    "\025\003\000\002\026\004\000\002\026\003\000\002\026" +
    "\004\000\002\026\003\000\002\030\013\000\002\030\012" +
    "\000\002\030\012\000\002\013\004\000\002\013\003\000" +
    "\002\014\004\000\002\014\003\000\002\014\007\000\002" +
    "\014\004\000\002\014\003\000\002\014\004\000\002\014" +
    "\004\000\002\014\003\000\002\010\007\000\002\010\006" +
    "\000\002\015\005\000\002\015\003\000\002\007\004\000" +
    "\002\011\005\000\002\011\010\000\002\011\007\000\002" +
    "\012\003\000\002\012\004\000\002\012\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\016\003\000\002\016\017\000\002\016\017\000\002\016" +
    "\021\000\002\016\013\000\002\016\014\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\017\011\000\002\017\012\000\002\017\004\000\002" +
    "\017\003\000\002\020\012\000\002\020\013\000\002\021" +
    "\013\000\002\021\012\000\002\022\010\000\002\022\007" +
    "\000\002\023\004\000\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\012\003\013\060\014\061\007\062\005\001" +
    "\002\000\012\002\ufffe\060\ufffe\061\ufffe\062\ufffe\001\002" +
    "\000\004\041\362\001\002\000\012\002\000\060\014\061" +
    "\007\062\005\001\002\000\044\002\ufff8\030\ufff8\033\ufff8" +
    "\036\ufff8\042\ufff8\043\ufff8\044\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\054\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\001\002\000\004\002\360\001\002\000\012\002" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002\000\012\002\ufffb" +
    "\060\ufffb\061\ufffb\062\ufffb\001\002\000\006\040\035\041" +
    "\037\001\002\000\004\030\015\001\002\000\004\035\016" +
    "\001\002\000\004\041\017\001\002\000\016\030\022\033" +
    "\024\036\023\042\020\061\007\062\005\001\002\000\006" +
    "\030\356\033\024\001\002\000\016\030\ufff3\033\ufff3\036" +
    "\ufff3\042\ufff3\061\ufff3\062\ufff3\001\002\000\006\004\121" +
    "\033\120\001\002\000\004\041\117\001\002\000\004\030" +
    "\042\001\002\000\006\040\035\041\037\001\002\000\016" +
    "\030\ufff1\033\ufff1\036\ufff1\042\ufff1\061\ufff1\062\ufff1\001" +
    "\002\000\006\040\035\041\037\001\002\000\016\030\ufff5" +
    "\033\ufff5\036\ufff5\042\ufff5\061\ufff5\062\ufff5\001\002\000" +
    "\016\030\022\033\024\036\032\042\020\061\007\062\005" +
    "\001\002\000\004\041\034\001\002\000\016\030\ufff6\033" +
    "\ufff6\036\ufff6\042\ufff6\061\ufff6\062\ufff6\001\002\000\012" +
    "\002\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002\000\052\002" +
    "\uffd9\030\uffd9\033\uffd9\036\uffd9\041\040\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\001\002\000\016\030\ufff4\033\ufff4\036\ufff4\042\ufff4\061" +
    "\ufff4\062\ufff4\001\002\000\050\002\uffdb\030\uffdb\033\uffdb" +
    "\036\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\001\002\000\050\002\uffda\030" +
    "\uffda\033\uffda\036\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\001\002\000\016" +
    "\030\ufff2\033\ufff2\036\ufff2\042\ufff2\061\ufff2\062\ufff2\001" +
    "\002\000\004\004\043\001\002\000\022\017\046\021\045" +
    "\026\051\027\047\030\050\031\055\032\052\033\053\001" +
    "\002\000\050\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\034\uffc7\040\uffc7" +
    "\041\uffc7\001\002\000\022\017\046\021\045\026\051\027" +
    "\047\030\050\031\055\032\052\033\053\001\002\000\022" +
    "\017\046\021\045\026\051\027\047\030\050\031\055\032" +
    "\052\033\053\001\002\000\050\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\034\uffc6\040\uffc6\041\uffc6\001\002\000\050\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\034\uffc4\040\uffc4\041\uffc4\001\002\000\050" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\034\uffc5\040\uffc5\041\uffc5\001" +
    "\002\000\050\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\034\uffc2\040\uffc2" +
    "\041\uffc2\001\002\000\022\017\046\021\045\026\051\027" +
    "\047\030\050\031\055\032\052\033\053\001\002\000\040" +
    "\007\072\010\061\011\071\012\060\013\067\014\073\015" +
    "\065\016\064\020\062\021\057\022\063\023\070\024\056" +
    "\025\074\034\066\001\002\000\050\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\034\uffc3\040\uffc3\041\uffc3\001\002\000\022\017\046" +
    "\021\045\026\051\027\047\030\050\031\055\032\052\033" +
    "\053\001\002\000\022\017\046\021\045\026\051\027\047" +
    "\030\050\031\055\032\052\033\053\001\002\000\022\017" +
    "\046\021\045\026\051\027\047\030\050\031\055\032\052" +
    "\033\053\001\002\000\022\017\046\021\045\026\051\027" +
    "\047\030\050\031\055\032\052\033\053\001\002\000\022" +
    "\017\046\021\045\026\051\027\047\030\050\031\055\032" +
    "\052\033\053\001\002\000\022\017\046\021\045\026\051" +
    "\027\047\030\050\031\055\032\052\033\053\001\002\000" +
    "\022\017\046\021\045\026\051\027\047\030\050\031\055" +
    "\032\052\033\053\001\002\000\022\017\046\021\045\026" +
    "\051\027\047\030\050\031\055\032\052\033\053\001\002" +
    "\000\010\034\uffdc\040\uffdc\041\uffdc\001\002\000\022\017" +
    "\046\021\045\026\051\027\047\030\050\031\055\032\052" +
    "\033\053\001\002\000\022\017\046\021\045\026\051\027" +
    "\047\030\050\031\055\032\052\033\053\001\002\000\022" +
    "\017\046\021\045\026\051\027\047\030\050\031\055\032" +
    "\052\033\053\001\002\000\022\017\046\021\045\026\051" +
    "\027\047\030\050\031\055\032\052\033\053\001\002\000" +
    "\022\017\046\021\045\026\051\027\047\030\050\031\055" +
    "\032\052\033\053\001\002\000\022\017\046\021\045\026" +
    "\051\027\047\030\050\031\055\032\052\033\053\001\002" +
    "\000\050\005\uffd2\006\uffd2\007\072\010\061\011\071\012" +
    "\060\013\067\014\073\015\065\016\064\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\056\025\uffd2\034\uffd2\040\uffd2\041" +
    "\uffd2\001\002\000\050\005\uffcb\006\uffcb\007\072\010\061" +
    "\011\uffcb\012\uffcb\013\067\014\uffcb\015\065\016\064\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\034\uffcb" +
    "\040\uffcb\041\uffcb\001\002\000\050\005\uffc8\006\uffc8\007" +
    "\uffc8\010\061\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\065" +
    "\016\064\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\034\uffc8\040\uffc8\041\uffc8\001\002\000\050\005\uffcc" +
    "\006\uffcc\007\072\010\061\011\uffcc\012\uffcc\013\067\014" +
    "\073\015\065\016\064\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\034\uffcc\040\uffcc\041\uffcc\001\002\000" +
    "\050\005\uffd4\006\uffd4\007\072\010\061\011\071\012\060" +
    "\013\067\014\073\015\065\016\064\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\056\025\074\034\uffd4\040\uffd4\041\uffd4" +
    "\001\002\000\050\005\uffca\006\uffca\007\072\010\061\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\065\016\064\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\034\uffca\040" +
    "\uffca\041\uffca\001\002\000\050\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\064\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\034\uffd0\040\uffd0\041\uffd0\001\002\000\050\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\034\uffcf\040\uffcf\041\uffcf\001\002\000\050" +
    "\005\uffd5\006\uffd5\007\072\010\061\011\071\012\060\013" +
    "\067\014\073\015\065\016\064\020\uffd5\021\uffd5\022\uffd5" +
    "\023\070\024\056\025\074\034\uffd5\040\uffd5\041\uffd5\001" +
    "\002\000\050\005\uffd7\006\uffd7\007\072\010\061\011\071" +
    "\012\060\013\067\014\073\015\065\016\064\020\uffd7\021" +
    "\057\022\063\023\070\024\056\025\074\034\uffd7\040\uffd7" +
    "\041\uffd7\001\002\000\050\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\065\016\064" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\034" +
    "\uffc9\040\uffc9\041\uffc9\001\002\000\050\005\uffcd\006\uffcd" +
    "\007\072\010\061\011\071\012\uffcd\013\067\014\073\015" +
    "\065\016\064\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\034\uffcd\040\uffcd\041\uffcd\001\002\000\050\005" +
    "\uffd6\006\uffd6\007\072\010\061\011\071\012\060\013\067" +
    "\014\073\015\065\016\064\020\uffd6\021\uffd6\022\063\023" +
    "\070\024\056\025\074\034\uffd6\040\uffd6\041\uffd6\001\002" +
    "\000\050\005\uffd3\006\uffd3\007\072\010\061\011\071\012" +
    "\060\013\067\014\073\015\065\016\064\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\034\uffd3\040\uffd3\041" +
    "\uffd3\001\002\000\040\007\072\010\061\011\071\012\060" +
    "\013\067\014\073\015\065\016\064\020\062\021\057\022" +
    "\063\023\070\024\056\025\074\034\114\001\002\000\050" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\034\uffd8\040\uffd8\041\uffd8\001" +
    "\002\000\050\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\034\uffce\040\uffce" +
    "\041\uffce\001\002\000\050\005\uffd1\006\uffd1\007\072\010" +
    "\061\011\071\012\060\013\067\014\073\015\065\016\064" +
    "\020\uffd1\021\uffd1\022\063\023\070\024\056\025\074\034" +
    "\uffd1\040\uffd1\041\uffd1\001\002\000\012\002\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\001\002\000\024\017\046\021\045\026" +
    "\051\027\047\030\050\031\055\032\052\033\053\034\130" +
    "\001\002\000\024\017\046\021\045\026\051\027\047\030" +
    "\050\031\055\032\052\033\053\037\122\001\002\000\004" +
    "\033\124\001\002\000\044\007\072\010\061\011\071\012" +
    "\060\013\067\014\073\015\065\016\064\020\062\021\057" +
    "\022\063\023\070\024\056\025\074\034\uffde\040\uffde\041" +
    "\uffde\001\002\000\004\027\125\001\002\000\004\034\126" +
    "\001\002\000\010\034\uffdd\040\uffdd\041\uffdd\001\002\000" +
    "\006\005\164\034\345\001\002\000\004\035\132\001\002" +
    "\000\042\005\uffe0\007\072\010\061\011\071\012\060\013" +
    "\067\014\073\015\065\016\064\020\062\021\057\022\063" +
    "\023\070\024\056\025\074\034\uffe0\001\002\000\004\041" +
    "\133\001\002\000\032\030\155\033\024\042\020\043\150" +
    "\044\153\047\140\050\136\051\135\052\151\057\154\061" +
    "\007\062\005\001\002\000\040\030\uffea\033\uffea\036\uffea" +
    "\042\uffea\043\uffea\044\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\057\uffea\061\uffea\062\uffea\001\002" +
    "\000\004\035\334\001\002\000\004\033\324\001\002\000" +
    "\040\030\uffe7\033\uffe7\036\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\057" +
    "\uffe7\061\uffe7\062\uffe7\001\002\000\004\033\277\001\002" +
    "\000\040\030\uffec\033\uffec\036\uffec\042\uffec\043\uffec\044" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec" +
    "\057\uffec\061\uffec\062\uffec\001\002\000\006\040\035\041" +
    "\037\001\002\000\040\030\uffe4\033\uffe4\036\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\057\uffe4\061\uffe4\062\uffe4\001\002\000\006" +
    "\040\035\041\037\001\002\000\006\040\035\041\037\001" +
    "\002\000\034\030\155\033\024\036\272\042\020\043\150" +
    "\044\153\047\140\050\136\051\135\052\151\057\154\061" +
    "\007\062\005\001\002\000\040\030\uffc1\033\uffc1\036\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\047\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\054\uffc1\057\uffc1\061\uffc1\062\uffc1\001\002" +
    "\000\004\033\266\001\002\000\004\033\240\001\002\000" +
    "\044\030\uffb4\033\uffb4\036\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\213\046\214\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\057\uffb4\061\uffb4\062\uffb4\001\002\000\004" +
    "\033\171\001\002\000\006\040\035\041\037\001\002\000" +
    "\012\004\121\033\156\055\160\056\157\001\002\000\024" +
    "\017\046\021\045\026\051\027\047\030\050\031\055\032" +
    "\052\033\053\034\162\001\002\000\010\034\uffac\040\uffac" +
    "\041\uffac\001\002\000\010\034\uffad\040\uffad\041\uffad\001" +
    "\002\000\006\005\164\034\165\001\002\000\006\040\035" +
    "\041\037\001\002\000\040\030\uffe2\033\uffe2\036\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\057\uffe2\061\uffe2\062\uffe2\001\002\000" +
    "\022\017\046\021\045\026\051\027\047\030\050\031\055" +
    "\032\052\033\053\001\002\000\006\040\035\041\037\001" +
    "\002\000\040\030\uffe3\033\uffe3\036\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\057\uffe3\061\uffe3\062\uffe3\001\002\000\042\005\uffe1" +
    "\007\072\010\061\011\071\012\060\013\067\014\073\015" +
    "\065\016\064\020\062\021\057\022\063\023\070\024\056" +
    "\025\074\034\uffe1\001\002\000\040\030\uffe8\033\uffe8\036" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\057\uffe8\061\uffe8\062\uffe8\001" +
    "\002\000\024\017\173\021\045\026\051\027\047\030\174" +
    "\031\055\032\052\033\175\042\020\001\002\000\004\034" +
    "\203\001\002\000\022\017\046\021\045\026\051\027\047" +
    "\030\174\031\055\032\052\033\175\001\002\000\044\004" +
    "\121\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\034\uffc4\040\uffc4\001\002\000\022\017\046" +
    "\021\045\026\051\027\047\030\201\031\055\032\052\033" +
    "\053\001\002\000\006\034\uffba\040\uffba\001\002\000\006" +
    "\034\uffbb\040\uffbb\001\002\000\042\007\072\010\061\011" +
    "\071\012\060\013\067\014\073\015\065\016\064\020\062" +
    "\021\057\022\063\023\070\024\056\025\074\034\uffb9\040" +
    "\uffb9\001\002\000\042\004\043\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\034\uffc4\001\002" +
    "\000\006\034\uffb8\040\uffb8\001\002\000\004\035\204\001" +
    "\002\000\004\041\205\001\002\000\032\030\155\033\024" +
    "\042\020\043\150\044\153\047\140\050\136\051\135\052" +
    "\151\057\154\061\007\062\005\001\002\000\034\030\155" +
    "\033\024\036\207\042\020\043\150\044\153\047\140\050" +
    "\136\051\135\052\151\057\154\061\007\062\005\001\002" +
    "\000\050\030\uffb3\033\uffb3\036\uffb3\040\035\041\037\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\057\uffb3\061\uffb3\062" +
    "\uffb3\001\002\000\040\030\uffed\033\uffed\036\uffed\042\uffed" +
    "\043\uffed\044\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\057\uffed\061\uffed\062\uffed\001\002\000\044" +
    "\030\uffb2\033\uffb2\036\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\057\uffb2\061\uffb2\062\uffb2\001\002\000\042\030" +
    "\uffb5\033\uffb5\036\uffb5\042\uffb5\043\uffb5\044\uffb5\045\232" +
    "\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\057" +
    "\uffb5\061\uffb5\062\uffb5\001\002\000\004\035\225\001\002" +
    "\000\004\033\215\001\002\000\024\017\173\021\045\026" +
    "\051\027\047\030\174\031\055\032\052\033\175\042\020" +
    "\001\002\000\004\034\217\001\002\000\004\035\220\001" +
    "\002\000\004\041\221\001\002\000\032\030\155\033\024" +
    "\042\020\043\150\044\153\047\140\050\136\051\135\052" +
    "\151\057\154\061\007\062\005\001\002\000\034\030\155" +
    "\033\024\036\223\042\020\043\150\044\153\047\140\050" +
    "\136\051\135\052\151\057\154\061\007\062\005\001\002" +
    "\000\046\030\uffb0\033\uffb0\036\uffb0\040\035\041\037\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\057\uffb0\061\uffb0\062\uffb0\001" +
    "\002\000\042\030\uffb1\033\uffb1\036\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\057\uffb1\061\uffb1\062\uffb1\001\002\000\004" +
    "\041\226\001\002\000\032\030\155\033\024\042\020\043" +
    "\150\044\153\047\140\050\136\051\135\052\151\057\154" +
    "\061\007\062\005\001\002\000\034\030\155\033\024\036" +
    "\230\042\020\043\150\044\153\047\140\050\136\051\135" +
    "\052\151\057\154\061\007\062\005\001\002\000\006\040" +
    "\035\041\037\001\002\000\040\030\uffb7\033\uffb7\036\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\057\uffb7\061\uffb7\062\uffb7\001\002" +
    "\000\004\035\233\001\002\000\004\041\234\001\002\000" +
    "\032\030\155\033\024\042\020\043\150\044\153\047\140" +
    "\050\136\051\135\052\151\057\154\061\007\062\005\001" +
    "\002\000\034\030\155\033\024\036\236\042\020\043\150" +
    "\044\153\047\140\050\136\051\135\052\151\057\154\061" +
    "\007\062\005\001\002\000\006\040\035\041\037\001\002" +
    "\000\040\030\uffb6\033\uffb6\036\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\057\uffb6\061\uffb6\062\uffb6\001\002\000\024\017\173\021" +
    "\045\026\051\027\047\030\174\031\055\032\052\033\175" +
    "\042\020\001\002\000\004\034\242\001\002\000\004\035" +
    "\243\001\002\000\004\041\244\001\002\000\004\053\245" +
    "\001\002\000\022\017\046\021\045\026\051\027\047\030" +
    "\050\031\055\032\052\033\053\001\002\000\006\053\247" +
    "\054\250\001\002\000\022\017\046\021\045\026\051\027" +
    "\047\030\050\031\055\032\052\033\053\001\002\000\004" +
    "\006\251\001\002\000\004\041\252\001\002\000\032\030" +
    "\155\033\024\042\020\043\150\044\153\047\140\050\136" +
    "\051\135\052\151\057\154\061\007\062\005\001\002\000" +
    "\034\030\155\033\024\036\254\042\020\043\150\044\153" +
    "\047\140\050\136\051\135\052\151\057\154\061\007\062" +
    "\005\001\002\000\006\040\035\041\037\001\002\000\040" +
    "\030\uffc0\033\uffc0\036\uffc0\042\uffc0\043\uffc0\044\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\057\uffc0" +
    "\061\uffc0\062\uffc0\001\002\000\040\006\257\007\072\010" +
    "\061\011\071\012\060\013\067\014\073\015\065\016\064" +
    "\020\062\021\057\022\063\023\070\024\056\025\074\001" +
    "\002\000\004\041\260\001\002\000\032\030\155\033\024" +
    "\042\020\043\150\044\153\047\140\050\136\051\135\052" +
    "\151\057\154\061\007\062\005\001\002\000\036\030\155" +
    "\033\024\042\020\043\150\044\153\047\140\050\136\051" +
    "\135\052\151\053\uffaf\054\uffaf\057\154\061\007\062\005" +
    "\001\002\000\040\006\263\007\072\010\061\011\071\012" +
    "\060\013\067\014\073\015\065\016\064\020\062\021\057" +
    "\022\063\023\070\024\056\025\074\001\002\000\004\041" +
    "\264\001\002\000\032\030\155\033\024\042\020\043\150" +
    "\044\153\047\140\050\136\051\135\052\151\057\154\061" +
    "\007\062\005\001\002\000\036\030\155\033\024\042\020" +
    "\043\150\044\153\047\140\050\136\051\135\052\151\053" +
    "\uffae\054\uffae\057\154\061\007\062\005\001\002\000\022" +
    "\017\046\021\045\026\051\027\047\030\050\031\055\032" +
    "\052\033\053\001\002\000\040\007\072\010\061\011\071" +
    "\012\060\013\067\014\073\015\065\016\064\020\062\021" +
    "\057\022\063\023\070\024\056\025\074\034\270\001\002" +
    "\000\006\040\035\041\037\001\002\000\040\030\uffe9\033" +
    "\uffe9\036\uffe9\042\uffe9\043\uffe9\044\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\057\uffe9\061\uffe9\062" +
    "\uffe9\001\002\000\004\041\273\001\002\000\016\030\uffef" +
    "\033\uffef\036\uffef\042\uffef\061\uffef\062\uffef\001\002\000" +
    "\040\030\uffeb\033\uffeb\036\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\057" +
    "\uffeb\061\uffeb\062\uffeb\001\002\000\040\030\uffe5\033\uffe5" +
    "\036\uffe5\042\uffe5\043\uffe5\044\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\057\uffe5\061\uffe5\062\uffe5" +
    "\001\002\000\040\030\uffe6\033\uffe6\036\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\057\uffe6\061\uffe6\062\uffe6\001\002\000\024\017" +
    "\173\021\045\026\051\027\047\030\174\031\055\032\052" +
    "\033\175\042\020\001\002\000\004\040\301\001\002\000" +
    "\022\017\046\021\045\026\051\027\047\030\050\031\055" +
    "\032\052\033\053\001\002\000\040\007\072\010\061\011" +
    "\071\012\060\013\067\014\073\015\065\016\064\020\062" +
    "\021\057\022\063\023\070\024\056\025\074\040\303\001" +
    "\002\000\004\030\304\001\002\000\010\004\314\055\160" +
    "\056\157\001\002\000\004\034\306\001\002\000\004\035" +
    "\307\001\002\000\004\041\310\001\002\000\032\030\155" +
    "\033\024\042\020\043\150\044\153\047\140\050\136\051" +
    "\135\052\151\057\154\061\007\062\005\001\002\000\034" +
    "\030\155\033\024\036\312\042\020\043\150\044\153\047" +
    "\140\050\136\051\135\052\151\057\154\061\007\062\005" +
    "\001\002\000\006\040\035\041\037\001\002\000\040\030" +
    "\uffbf\033\uffbf\036\uffbf\042\uffbf\043\uffbf\044\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\057\uffbf\061" +
    "\uffbf\062\uffbf\001\002\000\022\017\046\021\045\026\051" +
    "\027\047\030\050\031\055\032\052\033\053\001\002\000" +
    "\040\007\072\010\061\011\071\012\060\013\067\014\073" +
    "\015\065\016\064\020\062\021\057\022\063\023\070\024" +
    "\056\025\074\034\316\001\002\000\004\035\317\001\002" +
    "\000\004\041\320\001\002\000\032\030\155\033\024\042" +
    "\020\043\150\044\153\047\140\050\136\051\135\052\151" +
    "\057\154\061\007\062\005\001\002\000\034\030\155\033" +
    "\024\036\322\042\020\043\150\044\153\047\140\050\136" +
    "\051\135\052\151\057\154\061\007\062\005\001\002\000" +
    "\006\040\035\041\037\001\002\000\040\030\uffbe\033\uffbe" +
    "\036\uffbe\042\uffbe\043\uffbe\044\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\057\uffbe\061\uffbe\062\uffbe" +
    "\001\002\000\024\017\173\021\045\026\051\027\047\030" +
    "\174\031\055\032\052\033\175\042\020\001\002\000\004" +
    "\034\326\001\002\000\004\035\327\001\002\000\004\041" +
    "\330\001\002\000\032\030\155\033\024\042\020\043\150" +
    "\044\153\047\140\050\136\051\135\052\151\057\154\061" +
    "\007\062\005\001\002\000\034\030\155\033\024\036\332" +
    "\042\020\043\150\044\153\047\140\050\136\051\135\052" +
    "\151\057\154\061\007\062\005\001\002\000\006\040\035" +
    "\041\037\001\002\000\040\030\uffbd\033\uffbd\036\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\057\uffbd\061\uffbd\062\uffbd\001\002\000" +
    "\004\041\335\001\002\000\032\030\155\033\024\042\020" +
    "\043\150\044\153\047\140\050\136\051\135\052\151\057" +
    "\154\061\007\062\005\001\002\000\034\030\155\033\024" +
    "\036\337\042\020\043\150\044\153\047\140\050\136\051" +
    "\135\052\151\057\154\061\007\062\005\001\002\000\004" +
    "\050\340\001\002\000\004\033\341\001\002\000\024\017" +
    "\173\021\045\026\051\027\047\030\174\031\055\032\052" +
    "\033\175\042\020\001\002\000\004\034\343\001\002\000" +
    "\006\040\035\041\037\001\002\000\040\030\uffbc\033\uffbc" +
    "\036\uffbc\042\uffbc\043\uffbc\044\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\057\uffbc\061\uffbc\062\uffbc" +
    "\001\002\000\004\035\346\001\002\000\004\041\347\001" +
    "\002\000\034\030\155\033\024\036\350\042\020\043\150" +
    "\044\153\047\140\050\136\051\135\052\151\057\154\061" +
    "\007\062\005\001\002\000\004\041\354\001\002\000\034" +
    "\030\155\033\024\036\352\042\020\043\150\044\153\047" +
    "\140\050\136\051\135\052\151\057\154\061\007\062\005" +
    "\001\002\000\004\041\353\001\002\000\016\030\ufff0\033" +
    "\ufff0\036\ufff0\042\ufff0\061\ufff0\062\ufff0\001\002\000\016" +
    "\030\uffee\033\uffee\036\uffee\042\uffee\061\uffee\062\uffee\001" +
    "\002\000\010\034\uffdf\040\uffdf\041\uffdf\001\002\000\004" +
    "\004\121\001\002\000\012\002\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\001\002\000\004\002\001\001\002\000\012\002\uffff" +
    "\060\uffff\061\uffff\062\uffff\001\002\000\044\002\ufff7\030" +
    "\ufff7\033\ufff7\036\ufff7\042\ufff7\043\ufff7\044\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\014\002\007\003\005\004\003\027\010\031" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\360\027\010\031\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\026\011\024\025\030\026\027" +
    "\030\020\031\025\001\001\000\004\011\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\040\001\001\000\002\001\001\000" +
    "\004\012\035\001\001\000\002\001\001\000\014\007\026" +
    "\011\024\026\032\030\020\031\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\053\006\043" +
    "\001\001\000\002\001\001\000\006\005\115\006\043\001" +
    "\001\000\006\005\114\006\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\112\006\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\111\006\043\001\001\000\006\005" +
    "\110\006\043\001\001\000\006\005\107\006\043\001\001" +
    "\000\006\005\106\006\043\001\001\000\006\005\105\006" +
    "\043\001\001\000\006\005\104\006\043\001\001\000\006" +
    "\005\103\006\043\001\001\000\006\005\102\006\043\001" +
    "\001\000\002\001\001\000\006\005\101\006\043\001\001" +
    "\000\006\005\100\006\043\001\001\000\006\005\077\006" +
    "\043\001\001\000\006\005\076\006\043\001\001\000\006" +
    "\005\075\006\043\001\001\000\006\005\074\006\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\130\006\043\015\126\001\001\000\006\005\122" +
    "\006\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\144\010\133\011\141\013\145\014\140" +
    "\016\136\017\146\020\151\023\143\031\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\275\001\001\000\002\001\001\000\004\012\274\001\001" +
    "\000\004\012\273\001\001\000\024\007\144\010\133\011" +
    "\141\014\207\016\136\017\146\020\151\023\143\031\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\211\001\001\000\002\001\001\000\004" +
    "\012\167\001\001\000\002\001\001\000\010\005\130\006" +
    "\043\015\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\162\001\001\000\002\001" +
    "\001\000\006\005\166\006\043\001\001\000\004\012\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\177\006\043\007\175\011\176\024\171" +
    "\001\001\000\002\001\001\000\010\005\114\006\043\011" +
    "\201\001\001\000\002\001\001\000\006\005\112\006\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\144\010\133\011\141\013" +
    "\205\014\140\016\136\017\146\020\151\023\143\031\142" +
    "\001\001\000\024\007\144\010\133\011\141\014\207\016" +
    "\136\017\146\020\151\023\143\031\142\001\001\000\004" +
    "\012\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\177\006\043\007\175\011\176\024\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\007\144\010\133\011\141\013\221\014\140\016\136\017" +
    "\146\020\151\023\143\031\142\001\001\000\024\007\144" +
    "\010\133\011\141\014\207\016\136\017\146\020\151\023" +
    "\143\031\142\001\001\000\004\012\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\144\010\133\011" +
    "\141\013\226\014\140\016\136\017\146\020\151\023\143" +
    "\031\142\001\001\000\024\007\144\010\133\011\141\014" +
    "\207\016\136\017\146\020\151\023\143\031\142\001\001" +
    "\000\004\012\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\007\144\010\133\011\141" +
    "\013\234\014\140\016\136\017\146\020\151\023\143\031" +
    "\142\001\001\000\024\007\144\010\133\011\141\014\207" +
    "\016\136\017\146\020\151\023\143\031\142\001\001\000" +
    "\004\012\236\001\001\000\002\001\001\000\014\005\177" +
    "\006\043\007\175\011\176\024\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\245" +
    "\001\001\000\006\005\261\006\043\001\001\000\002\001" +
    "\001\000\006\005\255\006\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\144\010\133\011\141\013" +
    "\252\014\140\016\136\017\146\020\151\023\143\031\142" +
    "\001\001\000\024\007\144\010\133\011\141\014\207\016" +
    "\136\017\146\020\151\023\143\031\142\001\001\000\004" +
    "\012\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\144\010\133\011\141\013\260" +
    "\014\140\016\136\017\146\020\151\023\143\031\142\001" +
    "\001\000\024\007\144\010\133\011\141\014\207\016\136" +
    "\017\146\020\151\023\143\031\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\007\144\010\133\011\141" +
    "\013\264\014\140\016\136\017\146\020\151\023\143\031" +
    "\142\001\001\000\024\007\144\010\133\011\141\014\207" +
    "\016\136\017\146\020\151\023\143\031\142\001\001\000" +
    "\006\005\266\006\043\001\001\000\002\001\001\000\004" +
    "\012\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\177\006\043\007\175\011\176\024" +
    "\277\001\001\000\002\001\001\000\006\005\301\006\043" +
    "\001\001\000\002\001\001\000\004\023\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\144\010\133\011\141\013\310\014" +
    "\140\016\136\017\146\020\151\023\143\031\142\001\001" +
    "\000\024\007\144\010\133\011\141\014\207\016\136\017" +
    "\146\020\151\023\143\031\142\001\001\000\004\012\312" +
    "\001\001\000\002\001\001\000\006\005\314\006\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\007\144\010\133\011\141\013\320\014\140\016" +
    "\136\017\146\020\151\023\143\031\142\001\001\000\024" +
    "\007\144\010\133\011\141\014\207\016\136\017\146\020" +
    "\151\023\143\031\142\001\001\000\004\012\322\001\001" +
    "\000\002\001\001\000\014\005\177\006\043\007\175\011" +
    "\176\024\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\144\010\133\011\141\013" +
    "\330\014\140\016\136\017\146\020\151\023\143\031\142" +
    "\001\001\000\024\007\144\010\133\011\141\014\207\016" +
    "\136\017\146\020\151\023\143\031\142\001\001\000\004" +
    "\012\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\144\010\133\011\141\013\335\014\140\016\136" +
    "\017\146\020\151\023\143\031\142\001\001\000\024\007" +
    "\144\010\133\011\141\014\207\016\136\017\146\020\151" +
    "\023\143\031\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\177\006\043\007\175\011\176\024\341" +
    "\001\001\000\002\001\001\000\004\012\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\007\144\010\133\011\141\013\350\014\140\016\136\017" +
    "\146\020\151\023\143\031\142\001\001\000\002\001\001" +
    "\000\024\007\144\010\133\011\141\014\207\016\136\017" +
    "\146\020\151\023\143\031\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacticojs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacticojs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacticojs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Analizadorjs.errores.addError(new MiErrorjs(s.left, s.right, TipoErrorjs.SINTACTICO, 
                "Se detectó un error sintáctico ("+s.value+")", String.valueOf(s.value)));
        
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        Analizadorjs.errores.addError(new MiErrorjs(s.left, s.right, TipoErrorjs.SINTACTICO, 
                        "Se detectó un error sintáctico ("+s.value+")", String.valueOf(s.value)));
    }
    
    public Clase clase;
    public ArrayList<Clase> claseslist = new ArrayList<>();
    public ArrayList<Comentarios> comentlist = new ArrayList<>();
    public Clases listaCl = new Clases(claseslist, comentlist);


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintacticojs$actions {
  private final Sintacticojs parser;

  /** Constructor */
  CUP$Sintacticojs$actions(Sintacticojs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action_part00000000(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacticojs$result;

      /* select the action based on the action number */
      switch (CUP$Sintacticojs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		RESULT = start_val;
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacticojs$parser.done_parsing();
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONESGENERALES 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		ArrayList<Clases> lista = (ArrayList<Clases>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    try{

        System.out.println("INICIANDO EL ANALISIS GENERAL DEL ARCHIVO");
        System.out.println(listaCl.getTotalMsj());
        System.out.println("SE ANALIZARON UN TOTAL DE : " + claseslist.size()+ " CLASES");
        System.out.println("HAY UN TOTAL DE : " + comentlist.size()+" COMENTARIOS EN EL ARCHIVO");

        Analizadorjs.clases = lista;
    }catch(Exception e){
        System.out.println(e);
    }

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONESGENERALES ::= INSTRUCCIONESGENERALES INSTRUCCIONGENERAL 
            {
              ArrayList<Clases> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		ArrayList<Clases> lista = (ArrayList<Clases>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Clases valor = (Clases)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    lista = new ArrayList<>();
    lista.add(valor);
    RESULT = lista;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGENERALES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONESGENERALES ::= INSTRUCCIONGENERAL 
            {
              ArrayList<Clases> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Clases a = (Clases)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    ArrayList<Clases> bloque = new ArrayList<>();
    bloque.add(a);
    RESULT = bloque;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGENERALES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONESGENERALES ::= error FINDELINEA 
            {
              ArrayList<Clases> RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGENERALES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONGENERAL ::= CLASE 
            {
              Clases RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Clase a = (Clase)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    listaCl.agregarClase(a);
    RESULT = listaCl;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONGENERAL",2, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONGENERAL ::= COMENTARIOS 
            {
              Clases RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Comentarios a = (Comentarios)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    listaCl.agregarComentario((Comentarios)a);
    RESULT = listaCl;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONGENERAL",2, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CLASE ::= definir_clase iden apertura_llave salto INSTRUCCIONESCLASE cierre_llave salto 
            {
              Clase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		ArrayList<Instrucciones> ins = (ArrayList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    clase = new Clase(valor, ins);
    clase.setLineasClase(finleft - begleft +1);
    RESULT = clase;
    

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASE",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASE ::= definir_clase iden apertura_llave salto cierre_llave salto 
            {
              Clase RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASE",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMENTARIOS ::= comentsimple 
            {
              Comentarios RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    Comentarios simple = new Comentarios((String)valor);
    RESULT = simple;
    

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMENTARIOS ::= comentario_multi salto 
            {
              Comentarios RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    Comentarios multi = new Comentarios((String)valor);
    RESULT = multi;
    

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONESCLASE ::= INSTRUCCIONESCLASE INSTRUCCIONCLASE 
            {
              ArrayList<Instrucciones> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		ArrayList<Instrucciones> lista = (ArrayList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Instrucciones valor = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    //System.out.println(valor.getInstruccionesMsj());
    lista.add((Instrucciones)valor);
    RESULT = lista;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESCLASE",19, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONESCLASE ::= INSTRUCCIONCLASE 
            {
              ArrayList<Instrucciones> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Instrucciones ins = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    //System.out.println(ins.getInstruccionesMsj());
    ArrayList<Instrucciones> inslist = new ArrayList<>();
    inslist.add((Instrucciones)ins);
    RESULT = inslist;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESCLASE",19, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONCLASE ::= DECLARACIONVARIABLE FINDELINEA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    Instrucciones instruc = new Instrucciones(Instruccion.DECLARACIONVARIABLE, (Variable)a);
    RESULT = instruc;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONCLASE",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONCLASE ::= DECLARACIONMETODO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Metodo a = (Metodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    //System.out.println(a.getMetMsj());
    Instrucciones instruc = new Instrucciones(Instruccion.DECLARACIONMETODO, (Metodo)a);
    RESULT = instruc;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONCLASE",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONCLASE ::= ASIGNACION FINDELINEA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    Instrucciones instruc = new Instrucciones(Instruccion.DECLARACIONVARIABLE, (Variable)a); 
    RESULT = instruc;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONCLASE",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONCLASE ::= COMENTARIOS 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Comentarios a = (Comentarios)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    //comentlist.add((Comentarios)a);
    listaCl.agregarComentario((Comentarios)a);
    

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONCLASE",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONMETODO ::= iden apertura_parentesis PARAMSLLAMADA cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave salto 
            {
              Metodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).value;
		int paramlistleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int paramlistright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		ArrayList<Parametros> paramlist = (ArrayList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    Metodo met = new Metodo(TipoMetodo.CONPARAMETROS, valor, paramlist);
    met.setLineasMetodo(finleft - begleft +1);
    RESULT = met;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONMETODO",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONMETODO ::= iden apertura_parentesis cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave salto 
            {
              Metodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    Metodo met = new Metodo(TipoMetodo.SINPARAMETROS, valor);
    met.setLineasMetodo(finleft - begleft +1);
    RESULT = met;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONMETODO",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONMETODO ::= iden apertura_parentesis PARAMSLLAMADA cierre_parentesis apertura_llave salto cierre_llave salto 
            {
              Metodo RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONMETODO",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONESMETODO ::= INSTRUCCIONESMETODO INSTRUCCIONMETODO 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESMETODO",9, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONESMETODO ::= INSTRUCCIONMETODO 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESMETODO",9, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCIONMETODO ::= DECLARACIONVARIABLE FINDELINEA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCIONMETODO ::= LLAMADAMETODO 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCIONMETODO ::= consola apertura_parentesis EXPRESION cierre_parentesis FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCIONMETODO ::= break_t FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCIONMETODO ::= SENTENCIA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCIONMETODO ::= ASIGNACION FINDELINEA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCIONMETODO ::= INCREMENTO FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCIONMETODO ::= COMENTARIOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Comentarios a = (Comentarios)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    listaCl.agregarComentario((Comentarios)a);
    RESULT = listaCl;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONMETODO",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LLAMADAMETODO ::= iden apertura_parentesis PARAMSLLAMADA cierre_parentesis FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",6, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LLAMADAMETODO ::= iden apertura_parentesis cierre_parentesis FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",6, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMSLLAMADA ::= PARAMSLLAMADA coma EXPRESION 
            {
              ArrayList<Parametros> RESULT =null;
		int paramlistleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int paramlistright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		ArrayList<Parametros> paramlist = (ArrayList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    Parametros param = new Parametros((String)valor);
    paramlist.add(param);
    RESULT = paramlist;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("PARAMSLLAMADA",11, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMSLLAMADA ::= EXPRESION 
            {
              ArrayList<Parametros> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    ArrayList<Parametros> paramlist = new ArrayList<>();
    Parametros param = new Parametros((String)valor);
    paramlist.add(param);
    RESULT = paramlist;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("PARAMSLLAMADA",11, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONVARIABLE ::= definir_variable ASIGNACION 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    //System.out.println(a.getVarMsj());
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONVARIABLE",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= iden igual EXPRESION 
            {
              Variable RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		
    Variable  var = new Variable(variable);
    RESULT = var;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= iden igual importar apertura_parentesis cadena cierre_parentesis 
            {
              Variable RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		
    Variable  var = new Variable(variable);
    RESULT = var;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= apertura_parentesis iden igual EXPRESION cierre_parentesis 
            {
              Variable RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		
    Variable  var = new Variable(variable);
    RESULT = var;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FINDELINEA ::= salto 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FINDELINEA",8, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FINDELINEA ::= fin_de_linea salto 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FINDELINEA",8, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FINDELINEA ::= fin_de_linea 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FINDELINEA",8, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= apertura_parentesis EXPRESION cierre_parentesis 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION suma EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION resta EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION multiplicacion EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION division EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION potencia EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION modulo EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= resta EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= not EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION mayor_que EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION menor_que EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION mayor_igual EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION menor_igual EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION diferencia EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION igualacion EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALOR ::= iden 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALOR ::= true_t 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR ::= false_t 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
    RESULT = a;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA ::= GENERARIFELSE 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA ::= switch_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto LISTACASE default_t dos_puntos salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA ::= for_t apertura_parentesis ASIGNACIONSENTENCIAS fin_de_linea EXPRESION fin_de_linea INCREMENTO cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA ::= for_t apertura_parentesis ASIGNACIONSENTENCIAS fin_de_linea EXPRESION fin_de_linea iden igual EXPRESION cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-14)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA ::= while_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA ::= do_t apertura_llave salto INSTRUCCIONESMETODO cierre_llave while_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACIONSENTENCIAS ::= ASIGNACION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACIONSENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACIONSENTENCIAS ::= DECLARACIONVARIABLE 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACIONSENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACIONSENTENCIAS ::= EXPRESION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACIONSENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACIONSENTENCIAS ::= not ASIGNACION 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ASIGNACIONSENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // GENERARIFELSE ::= GENERARIF else_t apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // GENERARIFELSE ::= GENERARIF GENERARELSEIF else_t apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // GENERARIFELSE ::= GENERARIF GENERARELSEIF 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // GENERARIFELSE ::= GENERARIF 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // GENERARIF ::= if_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIF",14, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GENERARIF ::= if_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARIF",14, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // GENERARELSEIF ::= else_if apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARELSEIF",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // GENERARELSEIF ::= else_if apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("GENERARELSEIF",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTACASE ::= LISTACASE case_t EXPRESION dos_puntos salto INSTRUCCIONESMETODO 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("LISTACASE",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTACASE ::= case_t EXPRESION dos_puntos salto INSTRUCCIONESMETODO 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("LISTACASE",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INCREMENTO ::= iden suma_doble 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INCREMENTO",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INCREMENTO ::= iden resta_doble 
            {
              Object RESULT =null;
		


              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INCREMENTO",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintacticojs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
              return CUP$Sintacticojs$do_action_part00000000(
                               CUP$Sintacticojs$act_num,
                               CUP$Sintacticojs$parser,
                               CUP$Sintacticojs$stack,
                               CUP$Sintacticojs$top);
    }
}

}
