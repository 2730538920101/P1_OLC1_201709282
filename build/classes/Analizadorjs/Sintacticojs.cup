package Analizadorjs;
import java_cup.runtime.*;
import ASTjs.Erroresjs.*;
import ASTjs.Clases.*;
import java.util.ArrayList;

parser code  
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Analizadorjs.errores.add(new MiErrorjs(s.left, s.right, TipoErrorjs.SINTACTICO, 
                "Se detectó un error sintáctico ("+s.value+")"));
        
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        Analizadorjs.errores.add(new MiErrorjs(s.left, s.right, TipoErrorjs.SINTACTICO, 
                        "Se detectó un error sintáctico ("+s.value+")"));
    }
    
    public Clase clase;
    public ArrayList<Clase> claseslist = new ArrayList<>();
    public ArrayList<Comentarios> comentlist = new ArrayList<>();
    public Clases listaCl = new Clases();
:} 
terminal igual, coma, dos_puntos;
terminal igualacion, diferencia, menor_que, mayor_que, menor_igual, mayor_igual;
terminal and, or, not;
terminal suma, resta, multiplicacion, division, potencia, modulo;
terminal String decimal,cadena,iden;
terminal true_t, false_t;
terminal apertura_parentesis, cierre_parentesis, apertura_llave, cierre_llave;
terminal importar;
terminal fin_de_linea;
terminal salto;
terminal definir_variable;
terminal consola;
terminal if_t, else_t, else_if, for_t, while_t, do_t, switch_t, case_t, default_t;
terminal suma_doble, resta_doble;
terminal break_t;
terminal definir_clase;
terminal comentsimple, comentario_multi;

non terminal INICIO;
non terminal ArrayList<Clases> INSTRUCCIONESGENERALES;
non terminal Clases INSTRUCCIONGENERAL;
non terminal EXPRESION;
non terminal VALOR;
non terminal Variable DECLARACIONVARIABLE;
non terminal LLAMADAMETODO;
non terminal Variable ASIGNACION;
non terminal FINDELINEA;
non terminal INSTRUCCIONESMETODO;
non terminal INSTRUCCIONMETODO;
non terminal ArrayList<Parametros> PARAMSLLAMADA;
non terminal SENTENCIA;
non terminal GENERARIFELSE;
non terminal GENERARIF;
non terminal GENERARELSEIF;
non terminal LISTACASE;
non terminal INCREMENTO;
non terminal ASIGNACIONSENTENCIAS;
non terminal ArrayList<Instrucciones> INSTRUCCIONESCLASE;
non terminal Instrucciones INSTRUCCIONCLASE;
non terminal Clase CLASE;
non terminal Metodo DECLARACIONMETODO;
non terminal Comentarios COMENTARIOS;


precedence left suma;
precedence left resta;
precedence left multiplicacion;
precedence left division;
precedence left modulo;
precedence left potencia;
precedence left mayor_que;
precedence left menor_que;
precedence left mayor_igual;
precedence left menor_igual;
precedence left igualacion;
precedence left diferencia;
precedence left and;
precedence left or;
precedence left igual;
precedence right not;

start with INICIO;
INICIO ::= INSTRUCCIONESGENERALES {:
    System.out.println("INICIANDO EL ANALISIS GENERAL DEL ARCHIVO");
    System.out.println(listaCl.getTotalMsj());
    System.out.println("SE ANALIZARON UN TOTAL DE : " + claseslist.size()+ " CLASES");
    System.out.println("HAY UN TOTAL DE : " + comentlist.size()+" COMENTARIOS EN EL ARCHIVO");
    

:};

INSTRUCCIONESGENERALES ::= INSTRUCCIONESGENERALES:lista INSTRUCCIONGENERAL:valor{:
    lista = new ArrayList<>();
    lista.add(valor);
    RESULT = lista;
:}
| INSTRUCCIONGENERAL:a {:
    ArrayList<Clases> bloque = new ArrayList<>();
    bloque.add(a);
    RESULT = bloque;
:};

INSTRUCCIONGENERAL ::= CLASE:a {:
    claseslist.add(a);
    listaCl.setListaClases(claseslist);
    RESULT = listaCl;
:}
| COMENTARIOS:a {:
    comentlist.add((Comentarios)a);
    listaCl.setListaComentarios(comentlist);
    RESULT = listaCl;
:};


CLASE ::= definir_clase iden:valor apertura_llave:beg salto INSTRUCCIONESCLASE:ins cierre_llave:fin salto {:
    clase = new Clase(valor, ins);
    clase.setLineasClase(finleft - begleft +1);
    RESULT = clase;
    
:}
| definir_clase iden apertura_llave salto cierre_llave salto {:

:};

COMENTARIOS ::= comentsimple:valor {:
    Comentarios simple = new Comentarios((String)valor);
    RESULT = simple;
    
:}
| comentario_multi:valor salto {:
    Comentarios multi = new Comentarios((String)valor);
    RESULT = multi;
    
:};

INSTRUCCIONESCLASE ::= INSTRUCCIONESCLASE:lista INSTRUCCIONCLASE:valor {:
    lista.add((Instrucciones)valor);
    RESULT = lista;
:}
| INSTRUCCIONCLASE:ins {:
    ArrayList<Instrucciones> inslist = new ArrayList<>();
    inslist.add((Instrucciones)ins);
    RESULT = inslist;
:};

INSTRUCCIONCLASE ::= DECLARACIONVARIABLE:a {:
    Instrucciones instruc = new Instrucciones(Instruccion.DECLARACIONVARIABLE, (Variable)a);
    RESULT = instruc;
:}
| DECLARACIONMETODO:a {:
    Instrucciones instruc = new Instrucciones(Instruccion.DECLARACIONMETODO, (Metodo)a);
    RESULT = instruc;
:}
| ASIGNACION:a {:
    Instrucciones instruc = new Instrucciones(Instruccion.DECLARACIONVARIABLE, (Variable)a); 
    RESULT = instruc;
:}
| COMENTARIOS:a {:
    comentlist.add((Comentarios)a);
    
:};

DECLARACIONMETODO ::= iden:valor apertura_parentesis PARAMSLLAMADA:paramlist cierre_parentesis apertura_llave:beg salto INSTRUCCIONESMETODO cierre_llave:fin salto {:
    Metodo met = new Metodo(TipoMetodo.CONPARAMETROS, valor, paramlist);
    met.setLineasMetodo(finleft - begleft +1);
    RESULT = met;
:}
|iden:valor apertura_parentesis cierre_parentesis apertura_llave:beg salto INSTRUCCIONESMETODO cierre_llave:fin salto {:
    Metodo met = new Metodo(TipoMetodo.SINPARAMETROS, valor);
    met.setLineasMetodo(finleft - begleft +1);
    RESULT = met;
:}
|iden apertura_parentesis PARAMSLLAMADA cierre_parentesis apertura_llave salto cierre_llave salto {:

:};

INSTRUCCIONESMETODO ::= INSTRUCCIONESMETODO INSTRUCCIONMETODO {:

:}
| INSTRUCCIONMETODO {:

:};

INSTRUCCIONMETODO ::= DECLARACIONVARIABLE:a {:
    RESULT = a;
:} 
| LLAMADAMETODO {:

:}
| consola apertura_parentesis EXPRESION cierre_parentesis FINDELINEA {:

:}
| break_t FINDELINEA {:

:}
| SENTENCIA {:

:}
| ASIGNACION:a {:
    RESULT = a;
:}
| INCREMENTO FINDELINEA {:

:}
| COMENTARIOS:a {:
    RESULT = a;
:};

LLAMADAMETODO ::= iden apertura_parentesis PARAMSLLAMADA cierre_parentesis FINDELINEA {:

:}
| iden apertura_parentesis cierre_parentesis FINDELINEA {:

:};

PARAMSLLAMADA ::= PARAMSLLAMADA:paramlist coma EXPRESION:valor {:
    Parametros param = new Parametros((String)valor);
    paramlist.add(param);
    RESULT = paramlist;
:}
|EXPRESION:valor {:
    ArrayList<Parametros> paramlist = new ArrayList<>();
    Parametros param = new Parametros((String)valor);
    paramlist.add(param);
    RESULT = paramlist;
:};

DECLARACIONVARIABLE ::= definir_variable ASIGNACION:a {:
    
    RESULT = a;
:};

ASIGNACION ::= iden:variable igual EXPRESION FINDELINEA {:
    Variable  var = new Variable(variable);
    RESULT = var;
:}
| iden:variable igual importar apertura_parentesis cadena cierre_parentesis FINDELINEA {:
    Variable  var = new Variable(variable);
    RESULT = var;
:}
| apertura_parentesis iden:variable igual EXPRESION cierre_parentesis {:
    Variable  var = new Variable(variable);
    RESULT = var;
:};

FINDELINEA ::= salto {:

:}
| fin_de_linea salto {:

:}
| fin_de_linea {:

:};

EXPRESION ::= apertura_parentesis EXPRESION cierre_parentesis {:

:}
| EXPRESION suma EXPRESION {:

:}
| EXPRESION resta EXPRESION {:

:}
| EXPRESION multiplicacion EXPRESION {:

:}
| EXPRESION division EXPRESION {:

:}
| EXPRESION potencia EXPRESION {:

:}
| EXPRESION modulo EXPRESION {:

:}
| resta EXPRESION {:

:}
| EXPRESION and EXPRESION {:

:}
| EXPRESION or EXPRESION {:

:}
| not EXPRESION {:

:}
| EXPRESION mayor_que EXPRESION {:

:}
| EXPRESION menor_que EXPRESION {:

:}
| EXPRESION mayor_igual EXPRESION {:

:}
| EXPRESION menor_igual EXPRESION {:

:}
| EXPRESION diferencia EXPRESION {:

:}
| EXPRESION igualacion EXPRESION {:

:}
| VALOR:a {:
    RESULT = a;
:};

VALOR ::= cadena:a {:
    RESULT = a;
:}
| decimal:a {:
    RESULT = a;
:}
| iden:a {:
    RESULT = a;
:}
| true_t:a {:
    RESULT = a;
:}
| false_t:a {:
    RESULT = a;
:};

SENTENCIA ::= GENERARIFELSE {:

:}
| switch_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto LISTACASE default_t dos_puntos salto INSTRUCCIONESMETODO cierre_llave FINDELINEA {:

:}
| for_t apertura_parentesis ASIGNACIONSENTENCIAS EXPRESION fin_de_linea INCREMENTO cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA {:

:}
| while_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA {:

:}
| do_t apertura_llave salto INSTRUCCIONESMETODO cierre_llave while_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis FINDELINEA {:

:};

ASIGNACIONSENTENCIAS ::= ASIGNACION {:

:}
| DECLARACIONVARIABLE {:

:}
| EXPRESION {:

:}
| not ASIGNACION {:

:};

GENERARIFELSE ::= GENERARIF else_t apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA {:

:}
| GENERARIF GENERARELSEIF else_t apertura_llave salto INSTRUCCIONESMETODO  cierre_llave FINDELINEA {:

:}
| GENERARIF GENERARELSEIF {:

:}
| GENERARIF {:

:}; 

GENERARIF::= if_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave {:

:}
|if_t apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA {:

:};

GENERARELSEIF ::= else_if apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave FINDELINEA {:

:}	
| else_if apertura_parentesis ASIGNACIONSENTENCIAS cierre_parentesis apertura_llave salto INSTRUCCIONESMETODO cierre_llave {:

:};	

LISTACASE ::= LISTACASE case_t EXPRESION dos_puntos salto INSTRUCCIONESMETODO {:

:}
| case_t EXPRESION dos_puntos salto INSTRUCCIONESMETODO {:

:};

INCREMENTO ::= iden suma_doble {:

:}
| iden resta_doble {:

:};